{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"reprexlite: Python reproducible examples for sharing","text":"<p>reprexlite is a tool for rendering reproducible examples of Python code for sharing. With a convenient CLI and lightweight dependencies, you can quickly get it up and running in any virtual environment. It has an optional IPython extension with cell magic for easy use in Jupyter or VS Code. This project is inspired by R's reprex.</p> <p></p> <ul> <li>Paste or type some Python code that you're interested in sharing.</li> <li>reprexlite will execute that code in an isolated namespace. Any returned values or standard output will be captured and displayed as comments below their associated code.</li> <li>The rendered reprex will be printed for you to share. Its format can be easily copied, pasted, and run as-is by someone else. Here's an example of an outputted reprex:</li> </ul> <pre><code>from itertools import product\n\ngrid = list(product([1, 2, 3], [8, 16]))\ngrid\n#&gt; [(1, 8), (1, 16), (2, 8), (2, 16), (3, 8), (3, 16)]\nlist(zip(*grid))\n#&gt; [(1, 1, 2, 2, 3, 3), (8, 16, 8, 16, 8, 16)]\n</code></pre> <p>Writing a good reprex takes thought and effort (see \"Reprex Do's and Don'ts\" for tips). The goal of reprexlite is to be a tool that seamlessly handles the mechanical stuff, so you can devote your full attention to the important, creative work of writing the content.</p> <p>Reprex-style code formatting\u2014namely, with outputs as comments\u2014is also great for documentation. Users can copy and run with no modification. Consider using reprexlite when writing your documentation instead of copying code with <code>&gt;&gt;&gt;</code> prompts from an interactive Python shell. In fact, reprexlite can parse code with <code>&gt;&gt;&gt;</code> prompts and convert it into a reprex for you instead.</p> <p>reprexlite is a lightweight alternative to reprexpy and is similarly meant as a port of the R package reprex.</p>"},{"location":"#why-reproducible-examples","title":"Why reproducible examples?","text":"<p>If you're asking for help or reporting a bug, you are more likely to succeed in getting others to help you if you include a good reprex. If you're writing documentation, your readers will appreciate examples that they can easily run. See \"Design Philosophy\" for more on both \"Why reproducible examples?\" and \"Why reprexlite?\"</p>"},{"location":"#installation","title":"Installation","text":"<p>reprexlite is available on PyPI:</p> <pre><code>pip install reprexlite\n</code></pre> <p>Optional dependencies can be specified using the \"extras\" mechanism, e.g., <code>reprexlite[black]</code>. Available extras are:</p> <ul> <li><code>black</code> : for optionally autoformatting your code</li> <li><code>ipython</code> : to use the <code>%%reprex</code> cell magic in IPython/Jupyter</li> <li><code>pygments</code> : for syntax highlighting and the RTF venue</li> </ul>"},{"location":"#development-version","title":"Development version","text":"<p>The development version of reprexlite is available on GitHub:</p> <pre><code>pip install https://github.com/jayqi/reprexlite.git#egg=reprexlite\n</code></pre>"},{"location":"#quick-usage","title":"Quick usage","text":""},{"location":"#command-line-interface","title":"Command-line interface","text":"<p>The primary way to use reprexlite is through the CLI. It allows you to create a reprex without entering a Python session. Simply invoke the command:</p> <pre><code>reprex\n</code></pre> <p>This will take you into your system's default command-line text editor where you can type or paste your Python code. On macOS, for example, this will be <code>vim</code>. You can set your default editor using the <code>$EDITOR</code> environment variable\u2014I'm personally a fan of <code>nano</code>.</p> <p>Once you're done, reprexlite will print out your reprex to console.</p> <p>To see available options, use the <code>--help</code> flag.</p>"},{"location":"#python-library","title":"Python library","text":"<p>The same functionality as the CLI is also available from the <code>reprex</code> function with an equivalent API. Simply pass a string with your code, and it will print out the reprex, as well as return a <code>Reprex</code> object that contains all the data and formatting machinery. See the API documentation for more details.</p> <pre><code>from reprexlite import reprex\n\ncode = \"\"\"\nfrom itertools import product\n\ngrid = list(product([1, 2, 3], [8, 16]))\ngrid\nlist(zip(*grid))\n\"\"\"\n\nreprex(code)\n#&gt; ```python\n#&gt; from itertools import product\n#&gt;\n#&gt; grid = list(product([1, 2, 3], [8, 16]))\n#&gt; grid\n#&gt; #&gt; [(1, 8), (1, 16), (2, 8), (2, 16), (3, 8), (3, 16)]\n#&gt; list(zip(*grid))\n#&gt; #&gt; [(1, 1, 2, 2, 3, 3), (8, 16, 8, 16, 8, 16)]\n#&gt; ```\n#&gt;\n#&gt; &lt;sup&gt;Created at 2021-02-26 00:32:00 PST by [reprexlite](https://github.com/jayqi/reprexlite) v0.3.0&lt;/sup&gt;\n#&gt; &lt;reprexlite.formatting.GitHubReprex object at 0x109059f10&gt;\n</code></pre>"},{"location":"#ipythonjupyter-cell-magic","title":"IPython/Jupyter Cell Magic","text":"<p>reprexlite has an optional IPython extension with a <code>%%reprex</code> cell magic. That means you can easily create a reprex in an IPython shell (requires IPython), in Jupyter (requires Jupyter), or in VS Code's Interactive Python window (requires <code>ipykernel</code>). This can be handy if you're already working in a Jupyter notebook and want to share some code and output, which otherwise doesn't neatly copy and paste in a nice format.</p> <p>To use, simply load the extension with</p> <pre><code>%%load_ext reprexlite\n</code></pre> <p>and then put <code>%%reprex</code> at the top of a cell you want to create a reprex for:</p> <pre><code>%%reprex\nfrom itertools import product\n\ngrid = list(product([1, 2, 3], [8, 16]))\ngrid\nlist(zip(*grid))\n</code></pre> <p>The magic accepts the same inline option flags as the CLI. Use the line magic <code>%reprex</code> (note single <code>%</code>) to print out help. See the documentation for more details.</p>"},{"location":"changelog/","title":"reprexlite Changelog","text":""},{"location":"changelog/#v043-2021-11-05","title":"v0.4.3 (2021-11-05)","text":"<ul> <li>Added explicit setting of code evaluation namespace's <code>__name__</code> to <code>'__reprex__'</code>. Previously this was unset and would get inferred, and weird things like <code>'builtins'</code> would turn up. (PR #44)</li> </ul>"},{"location":"changelog/#v042-2021-02-28","title":"v0.4.2 (2021-02-28)","text":"<ul> <li>Added support for parsing code copied from an interactive Python shell (REPL) with <code>&gt;&gt;&gt;</code> prompts. (#29)</li> <li>Fixed issue where <code>tests</code> module was unintentionally included in distribution. (#30)</li> <li>Fixed missing requirement <code>importlib_metadata</code> for Python 3.6 and 3.7. (#31)</li> </ul>"},{"location":"changelog/#v041-2021-02-27","title":"v0.4.1 (2021-02-27)","text":"<ul> <li>Added missing LICENSE file.</li> </ul>"},{"location":"changelog/#v040-2021-02-27","title":"v0.4.0 (2021-02-27)","text":"<ul> <li>Added optional IPython extension that enables <code>%%reprex</code> cell magic. See documentation for usage. (#21)</li> </ul>"},{"location":"changelog/#v031-2021-02-26","title":"v0.3.1 (2021-02-26)","text":"<ul> <li>Documentation improvements. (#14, #19)</li> </ul>"},{"location":"changelog/#v030-2021-02-25","title":"v0.3.0 (2021-02-25)","text":"<ul> <li>Changed pygments styling to use the \"friendly\" color scheme, which looks better for dark backgrounds. (#15)</li> <li>Changed submodule organization for code related to reprex formatting. This is now in the <code>formatting</code> submodule. (#17)</li> </ul>"},{"location":"changelog/#v020-2021-02-20","title":"v0.2.0 (2021-02-20)","text":"<ul> <li>Removing old results from inputs: (#8)<ul> <li>Changed reprexes to\u2014by default\u2014remove lines matching the <code>comment</code> prefix (<code>#&gt;</code> by default). This means that if your input code is a previously rendered reprex, the old results will be removed first and you effectively regenerate it.</li> <li>Added a new option <code>old_results</code> that\u2014if set to True\u2014will preserve such lines.</li> </ul> </li> <li>Fixed a bug that caused intentional blank lines to be removed. (#7)</li> <li>Added stdout capturing. Any content printed to stdout will be shown as a result in the reprex. (#10)</li> <li>Added exception handling and stacktrace capture. If the input code has an exception, the stacktrace will be shown as a result in the reprex. (#12)</li> </ul>"},{"location":"changelog/#v010-2021-02-15","title":"v0.1.0 (2021-02-15)","text":"<p>Initial release! \ud83c\udf89</p>"},{"location":"cli/","title":"CLI Help Documentation","text":"<pre><code>reprex --help\n</code></pre> <pre><code> Usage: reprex [OPTIONS]                                                        \n\n Render reproducible examples of Python code for sharing. Your code will be     \n executed and the results will be embedded as comments below their associated   \n lines.                                                                         \n By default, your system's default command-line text editor will open for you   \n to type or paste in your code. This editor can be changed by setting the       \n EDITOR environment variable. You can instead specify an input file with the    \n --infile / -i option                                                           \n Additional markup will be added that is appropriate to the choice of venue     \n option. For example, for the default `gh` venue for GitHub Flavored Markdown,  \n the final reprex will look like:                                               \n ----------------------------------------                                       \n ```python                                                                      \n arr = [1, 2, 3, 4, 5]                                                          \n [x + 1 for x in arr]                                                           \n #&gt; [2, 3, 4, 5, 6]                                                             \n max(arr) - min(arr)                                                            \n #&gt; 4                                                                           \n ```                                                                            \n\n &lt;sup&gt;Created at 2021-02-27 00:13:55 PST by                                     \n [reprexlite](https://github.com/jayqi/reprexlite) v0.3.1&lt;/sup&gt;                 \n ----------------------------------------                                       \n\n The supported venue formats are:                                               \n\n - gh : GitHub Flavored Markdown                                                \n - so : StackOverflow, alias for gh                                             \n - ds : Discourse, alias for gh                                                 \n - html : HTML                                                                  \n - py : Python script                                                           \n - rtf : Rich Text Format                                                       \n - slack : Slack                                                                \n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --infile           -i                    PATH              Read code from an \u2502\n\u2502                                                            input file        \u2502\n\u2502                                                            instead via       \u2502\n\u2502                                                            editor.           \u2502\n\u2502                                                            [default: None]   \u2502\n\u2502 --outfile          -o                    PATH              Write output to   \u2502\n\u2502                                                            file instead of   \u2502\n\u2502                                                            printing to       \u2502\n\u2502                                                            console.          \u2502\n\u2502                                                            [default: None]   \u2502\n\u2502 --venue            -v                    [gh|so|ds|html|p  Output format     \u2502\n\u2502                                          y|rtf|slack]      appropriate to    \u2502\n\u2502                                                            the venue where   \u2502\n\u2502                                                            you plan to share \u2502\n\u2502                                                            this code.        \u2502\n\u2502                                                            [default: gh]     \u2502\n\u2502 --advertise            --no-advertise                      Whether to        \u2502\n\u2502                                                            include footer    \u2502\n\u2502                                                            that credits      \u2502\n\u2502                                                            reprexlite. If    \u2502\n\u2502                                                            unspecified, will \u2502\n\u2502                                                            depend on         \u2502\n\u2502                                                            specified venue's \u2502\n\u2502                                                            default.          \u2502\n\u2502                                                            [default:         \u2502\n\u2502                                                            no-advertise]     \u2502\n\u2502 --session-info                                             Whether to        \u2502\n\u2502                                                            include details   \u2502\n\u2502                                                            about session and \u2502\n\u2502                                                            installed         \u2502\n\u2502                                                            packages.         \u2502\n\u2502 --style                                                    Autoformat code   \u2502\n\u2502                                                            with black.       \u2502\n\u2502                                                            Requires black to \u2502\n\u2502                                                            be installed.     \u2502\n\u2502 --comment                                TEXT              Comment prefix to \u2502\n\u2502                                                            use for results   \u2502\n\u2502                                                            returned by       \u2502\n\u2502                                                            expressions.      \u2502\n\u2502                                                            [default: #&gt;]     \u2502\n\u2502 --old-results                                              Keep old results, \u2502\n\u2502                                                            i.e., lines that  \u2502\n\u2502                                                            match the prefix  \u2502\n\u2502                                                            specified by the  \u2502\n\u2502                                                            --comment option. \u2502\n\u2502                                                            If not using this \u2502\n\u2502                                                            option, then such \u2502\n\u2502                                                            lines are         \u2502\n\u2502                                                            removed, meaning  \u2502\n\u2502                                                            that an input     \u2502\n\u2502                                                            that is a reprex  \u2502\n\u2502                                                            will be           \u2502\n\u2502                                                            effectively       \u2502\n\u2502                                                            regenerated.      \u2502\n\u2502 --version                                                  Show reprexlite   \u2502\n\u2502                                                            version and exit. \u2502\n\u2502 --install-comple\u2026                                          Install           \u2502\n\u2502                                                            completion for    \u2502\n\u2502                                                            the current       \u2502\n\u2502                                                            shell.            \u2502\n\u2502 --show-completion                                          Show completion   \u2502\n\u2502                                                            for the current   \u2502\n\u2502                                                            shell, to copy it \u2502\n\u2502                                                            or customize the  \u2502\n\u2502                                                            installation.     \u2502\n\u2502 --help                                                     Show this message \u2502\n\u2502                                                            and exit.         \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"design-philosophy/","title":"Design Philosophy","text":"<p>Reprex is a portmanteau for reproducible example. This term and its associated approach to minimal reproducible examples have been popularized within the R data science community, driven by the adoption of the reprex tidyverse package.</p> <p>The reprex code:</p> <ul> <li>Must run and, therefore, should be run by the person posting. No faking it.</li> <li>Should be easy for others to digest, so they don\u2019t necessarily have to run it. You are encouraged to include selected bits of output.</li> <li>Should be easy for others to copy + paste + run, if and only if they so choose. Don\u2019t let inclusion of output break executability.</li> </ul> <p><p>\u2015 \"Package Philosophy,\" from the R reprex documentation</p></p> <p>Writing a good reprex takes thought and effort (see \"Reprex Do's and Don'ts\" for tips). The goal of reprexlite is to be a tool for Python that handles the mechanical stuff\u2014running your code, capturing the output, formatting everything\u2014so you don't have to worry about it, and you can devote your full attention to the important, creative work of writing the content. The action of running your code and seeing the outputs can also be a helpful forcing function in really making sure your example works and produces what you intend.</p>"},{"location":"design-philosophy/#why-reproducible-examples","title":"Why reproducible examples?","text":"<p>From the R reprex readme.</p>"},{"location":"design-philosophy/#if-youre-looking-for-help-with-a-problem-or-bug","title":"If you're looking for help with a problem or bug...","text":"<p>...you are more likely to succeed if you make it as easy as possible for others to help you. You are asking people to do work on your behalf. Remember: most open-source software maintainers and StackOverflow posters are volunteers and are not obligated to help you. Even someone who is obligated to help you would still be able to get to an answer more quickly if you make it easier for them to understand your problem.</p> <p>Plus, the exercise of writing the reprex might even help you figure out how to solve the problem yourself. This is basically the principle of rubber duck debugging.</p>"},{"location":"design-philosophy/#if-youre-writing-a-tutorial-or-documentation","title":"If you're writing a tutorial or documentation...","text":"<p>...actual working examples are valuable to your users. A reprex\u2014with complete directly runnable code and showing the expected outputs\u2014will show your audience what you're demonstrating, and also give them the option to easily try for themselves. Doing is often the most effective way of learning how to do something in code. And, with documentation especially, people often just want to arrive at working code for their use case as quickly as possible. Something that they can just copy and run is exactly what they're looking for.</p>"},{"location":"design-philosophy/#reprex-vs-copying-from-shell-doctest-style","title":"Reprex vs. Copying from shell (doctest-style)","text":"<p>A widely used approach for Python code examples is copying from an interactive Python shell. It is easily recognized from the <code>&gt;&gt;&gt;</code> prompt before each code statement. Such a code example is sometimes called a \"doctest\" because the <code>doctest</code> module from the Python standard library is able to parse it.</p> <pre><code>&gt;&gt;&gt; import math\n&gt;&gt;&gt; math.sqrt(4)\n2.0\n</code></pre> <p>This style of code example takes no special tools to generate: simply open a <code>python</code> shell from command line, write your code, and copy what you see. Many Python packages use it for their documentation, e.g., requests. There is also tooling for parsing it. The doctest module can run such examples in the docstrings of your scripts, and test that the output matches what is written. Other tools like Sphinx are able to parse it when rendering your documentation into other formats.</p> <p>The drawback of doctest-style examples is that they are not valid Python syntax, so you can't just copy, paste, and run such  examples. The <code>&gt;&gt;&gt;</code> prompt is not valid. While IPython's interactive shell and Jupyter notebooks do support executing code with the prompt, it won't work in a regular Python REPL or in Python scripts. Furthermore, since the outputs might be anything, they may not be valid Python syntax either, depending on their <code>repr</code>. A barebones class, for example, will look like <code>&lt;__main__.MyClass object at 0x7f932a001400&gt;</code> and is not valid.</p> <p>So, while no special tools were needed to generate a doctest-style example, either special tools or manual editing are needed to run it. This puts the burden on the person you're sharing with, which is counterproductive. As discussed in the previous section, we want reproducible examples to make it easier for others to run your code.</p> <p>In contrast, reprexes are valid Python code. Anyone can copy, paste, and run a reprex without any special tools or manual editing required.</p> <pre><code>import math\nmath.sqrt(4)\n#&gt; 2.0\n</code></pre> <p>If this has convinced you, you can take advantage of reprexlite's ability to parse doctest-style code and easily convert those examples to reprexes instead.</p>"},{"location":"design-philosophy/#reprexlites-design","title":"reprexlite's Design","text":"<p>The primary design goal of reprexlite is that it should be quick and convenient to use. That objective drove the emphasis on following the design characteristics:</p> <ul> <li>Lightweight. reprexlite needs to be in your virtual environment to be able to run your code. By having minimal and lightweight dependencies itself, reprexlite is quick to install and is unlikely to conflict with your other dependencies.</li> <li>Easy access. reprexlite comes with a CLI, so you can quickly create a reprex without needing to start a Python shell or to import anything.<ul> <li>And flexible. The CLI isn't the only option. The Python library provides programmatic access, and there is an optional IPython/Jupyter extension for use with a cell magic.</li> </ul> </li> </ul> <p>The API, including the available configuration and naming of parameters, mostly matches both R reprex and reprexpy. The intent is that anyone familiar with these other tools can quickly feel comfortable with reprexlite.</p> <p>As a secondary objective, the reprexlite library is designed so that its underlying functionality is accessible and extensible. It has a modular object-oriented design based on composition. Individual parts, like the code parsing or the output formatting, can be used independently, extended, or replaced. Additionally, the library is thoroughly type-annotated and documented.</p>"},{"location":"design-philosophy/#limitations","title":"Limitations","text":"<p>Compared to R reprex and reprexpy, reprexlite does trade off some capabilities in favor of our design objective. Known limitations include:</p> <ul> <li>No clipboard integration. The two main Python clipboard libraries, pyperclip and xerox, have non-Python dependencies on some OSes that make them sometimes difficult to install. However, command-line editor support built-in to the CLI is nearly as easy as reading from clipboard, and has the added benefit that you can see the code before it gets executed.</li> <li>No plot image support. Both R reprex and reprexpy support automatically uploading plots to imgur.com and injecting the link into your outputted reprex. This always seemed to me like a weird default as it could lead to inadvertent leaking of private data.</li> <li>Code is not run in a subprocess, so it's not perfectly isolated. reprexlite runs the code using <code>eval</code> and <code>exec</code> with a fresh namespace, but otherwise still executes code within the main Python process. That means, for example, modules that are stateful or have been monkeypatched could potentially leak that state into the reprex.</li> </ul> <p>By not supporting the first two functionalities, reprexlite has significantly fewer and simpler dependencies. Both of these features, while convenient, could lead to unintentional code execution or leaking data to the public web. From that perspective, I believe this is a worthwhile tradeoff.</p> <p>The third limitation is one where feedback is welcome. Hopefully it will only matter in unusual edge cases. If you have ideas for mitigation for the current <code>eval</code>-<code>exec</code> implementation, please open an issue on GitHub. A subprocess-based implementation would solve this, but would be more difficult to capture output from\u2014any implementation ideas for this approach are also welcome.</p>"},{"location":"dos-and-donts/","title":"Reprex Do's and Don'ts","text":"<p>This article discusses how to write an effective reprex. If you're asking for help or sharing code with someone, you will be much more likely to succeed if you have a good reprex. If you still need to be convinced why you should write a reprex or use reprexlite, check out the first half of \"Design Philosophy\".</p> <p>Writing a good reprex takes thought and effort. A tool like reprexlite is not a magic bullet\u2014it's meant to take care of the mechanical stuff so you can devote your energy towards coming up with the right content.</p> <p>Many of the key ideas in this article are borrowed from R reprex's \"Reprex do's and don'ts\" and StackOverflow's \"How to create a Minimal, Reproducible Example\".</p>"},{"location":"dos-and-donts/#your-reprexes-should-be","title":"Your reprexes should be...","text":""},{"location":"dos-and-donts/#minimal","title":"Minimal","text":"<ul> <li>Do use the smallest, simplest data possible.<ul> <li>If you need a dataframe, the <code>sklearn.datasets</code> module has convenient toy datasets like <code>iris</code>.</li> <li>The Faker library has utilities to help you generate fake data like names and addresses.</li> </ul> </li> <li>Don't include code unrelated to the specific thing you want to demonstrate.<ul> <li>Do ruthlessly remove unnecessary code. If you're not sure, try removing things bit by bit until it doesn't produce what you want anymore.</li> <li>Consider starting your reprex from scratch. This helps force you to add in only what is needed.</li> </ul> </li> </ul>"},{"location":"dos-and-donts/#readable","title":"Readable","text":"<ul> <li>Do follow code style best practices.<ul> <li>Consider using the <code>style</code> option which will use black to autoformat your code.</li> </ul> </li> <li>Don't sacrifice clarity for brevity.<ul> <li>Don't play code golf. For loops and if-else blocks can often be more readable.</li> <li>Do use clear, descriptive, and idiomatic naming conventions.</li> </ul> </li> </ul>"},{"location":"dos-and-donts/#reproducible","title":"Reproducible","text":"<ul> <li>Do include everything required to produce your example, including imports and custom class/function definitions. If you're using reprexlite, your code won't work without this anyways.</li> <li>Do detail what versions of relevant package, Python, and OS you are using.<ul> <li>Consider using the <code>session_info</code> option, which will include information about your Python, OS, and installed packages at the end of your reprex.</li> </ul> </li> <li>Do double-check that your example reproduces the thing you want to show. One can often inadvertently solve a problem they were trying to debug when writing an example.</li> <li>Don't hardcode paths that wouldn't exist on someone else's computer, especially absolute paths.</li> </ul>"},{"location":"dos-and-donts/#respectful-of-other-peoples-computers","title":"Respectful of other people's computers","text":"<ul> <li>Do clean up after yourself if you create files. Take advantage of Python's <code>tempfile</code> module for creating temporary files and directories.</li> <li>Don't delete files that you didn't create.</li> </ul>"},{"location":"dos-and-donts/#this-seems-like-a-lot-of-work","title":"This seems like a lot of work!","text":"<p>Yes, creating a great reprex requires work. You are asking other people to do work too. It\u2019s a partnership.</p> <p>80% of the time you will solve your own problem in the course of writing an excellent reprex. YMMV.</p> <p>The remaining 20% of the time, you will create a reprex that is more likely to elicit the desired behavior in others.</p> <p><p>\u2015 \"Reprex do's and don'ts,\" from the R reprex documentation</p></p>"},{"location":"ipython-jupyter-magic/","title":"IPython/Jupyter Magic","text":"<p>Reprex-rendering is also available in IPython, Jupyter, and VS Code through an IPython cell magic. This functionality requires IPython to be installed at a minimum. (You can install both reprexlite and IPython together with <code>reprexlite[ipython]</code>.)</p> <p>To use, first load the extension:</p> In\u00a0[1]: Copied! <pre>%load_ext reprexlite\n</pre> %load_ext reprexlite <p>and then simply use the <code>%%reprex</code> magic with a cell containing the code you want a reprex of.</p> In\u00a0[2]: Copied! <pre>%%reprex\n\nfrom itertools import product\n\ngrid = list(product([1, 2, 3], [8, 16]))\ngrid\nlist(zip(*grid))\n</pre> %%reprex  from itertools import product  grid = list(product([1, 2, 3], [8, 16])) grid list(zip(*grid)) <pre>```python\nfrom itertools import product\n\ngrid = list(product([1, 2, 3], [8, 16]))\ngrid\n#&gt; [(1, 8), (1, 16), (2, 8), (2, 16), (3, 8), (3, 16)]\nlist(zip(*grid))\n#&gt; [(1, 1, 2, 2, 3, 3), (8, 16, 8, 16, 8, 16)]\n```\n\n&lt;sup&gt;Created at 2021-02-27 16:08:34 PST by [reprexlite](https://github.com/jayqi/reprexlite) v0.3.1&lt;/sup&gt;\n\n</pre> <p>That's it! The cell magic shares the same interface and command-line options as the CLI.</p> In\u00a0[3]: Copied! <pre>%%reprex -v slack\nx = 2\nx + 2\n</pre> %%reprex -v slack x = 2 x + 2 <pre>```\nx = 2\nx + 2\n#&gt; 4\n```\n\n</pre> In\u00a0[4]: Copied! <pre>%reprex\n</pre> %reprex <pre>reprexlite v0.3.1 IPython Magic\n\nCell Magic Usage: %%reprex [OPTIONS]\n\n  Render reproducible examples of Python code for sharing. Your code will be\n  executed and the results will be embedded as comments below their associated\n  lines.\n\n  Additional markup will be added that is appropriate to the choice of venue\n  option. For example, for the default `gh` venue for GitHub Flavored\n  Markdown, the final reprex will look like:\n\n  ----------------------------------------\n  ```python\n  arr = [1, 2, 3, 4, 5]\n  [x + 1 for x in arr]\n  #&gt; [2, 3, 4, 5, 6]\n  max(arr) - min(arr)\n  #&gt; 4\n  ```\n \n  &lt;sup&gt;Created at 2021-02-27 00:13:55 PST by [reprexlite](https://github.com/jayqi/reprexlite) v0.3.1&lt;/sup&gt;\n  ----------------------------------------\n\n  The supported venue formats are:\n \n  - gh : GitHub Flavored Markdown\n  - so : StackOverflow, alias for gh\n  - ds : Discourse, alias for gh\n  - html : HTML\n  - py : Python script\n  - rtf : Rich Text Format\n  - slack : Slack\n\nOptions:\n  -i, --infile PATH               Read code from an input file instead via\n                                  editor.\n\n  -o, --outfile PATH              Write output to file instead of printing to\n                                  console.\n\n  -v, --venue [gh|so|ds|html|py|rtf|slack]\n                                  Output format appropriate to the venue where\n                                  you plan to share this code.  [default: gh]\n\n  --advertise / --no-advertise    Whether to include footer that credits\n                                  reprexlite. If unspecified, will depend on\n                                  specified venue's default.\n\n  --session-info                  Whether to include details about session and\n                                  installed packages.\n\n  --style                         Autoformat code with black. Requires black to\n                                  be installed.\n\n  --comment TEXT                  Comment prefix to use for results returned by\n                                  expressions.  [default: #&gt;]\n\n  --old-results                   Keep old results, i.e., lines that match the\n                                  prefix specified by the --comment option. If\n                                  not using this option, then such lines are\n                                  removed, meaning that an input that is a\n                                  reprex will be effectively regenerated.\n\n</pre> <p>If you're in VS Code and <code>ipykernel</code> is installed, you similarly use the <code>%%reprex</code> cell magic with Python Interactive windows. For a file set to Python language mode, use <code># %%</code> to mark an IPython cell that can then be run. Or you can open the Interactive window on its own via \"Jupyter: Create Interactive Window\" through the Command Palette. See VS Code docs for more info.</p> <p>Note that\u2014just like other ways of rendering a reprex\u2014your code is evaluated in an isolated namespace that is separate from the namespace of your IPython session or your notebook. That means, for example, variables defined in your notebook won't exist in your reprex.</p> In\u00a0[5]: Copied! <pre>notebook_var = 2\n</pre> notebook_var = 2 In\u00a0[6]: Copied! <pre>%%reprex --no-advertise\n\nnotebook_var\n</pre> %%reprex --no-advertise  notebook_var <pre>```python\nnotebook_var\n#&gt; Traceback (most recent call last):\n#&gt;   File \"/Users/jqi/repos/reprexlite/reprexlite/code.py\", line 69, in evaluate\n#&gt;     result = eval(str(self).strip(), scope, scope)\n#&gt;   File \"&lt;string&gt;\", line 1, in &lt;module&gt;\n#&gt; NameError: name 'notebook_var' is not defined\n```\n\n</pre>"},{"location":"ipython-jupyter-magic/#ipythonjupyter-magic","title":"IPython/Jupyter Magic\u00b6","text":""},{"location":"ipython-jupyter-magic/#print-help-documentation","title":"Print Help Documentation\u00b6","text":"<p>You can use the <code>%reprex</code> line magic (single-<code>%</code>) to print out documentation.</p>"},{"location":"ipython-jupyter-magic/#vs-code-interactive-python-windows","title":"VS Code Interactive Python Windows\u00b6","text":""},{"location":"ipython-jupyter-magic/#isolated-namespace","title":"Isolated Namespace\u00b6","text":""},{"location":"api-reference/code/","title":"reprexlite.code","text":""},{"location":"api-reference/code/#reprexlite.code-attributes","title":"Attributes","text":""},{"location":"api-reference/code/#reprexlite.code.NO_RETURN","title":"<code>NO_RETURN = object()</code>  <code>module-attribute</code>","text":"<p>Explicit placeholder object for statements, which have no return value (as opposed to expressions).</p>"},{"location":"api-reference/code/#reprexlite.code-classes","title":"Classes","text":""},{"location":"api-reference/code/#reprexlite.code.CodeBlock","title":"<code>CodeBlock</code>","text":"<p>Class that takes a block of Python code input and evaluates it. Call <code>str(...)</code> on an instance to get back a string containing the original source with evaluated outputs embedded as comments below each statement.</p> <p>Attributes:</p> Name Type Description <code>input</code> <code>str</code> <p>Block of Python code</p> <code>style</code> <code>bool</code> <p>Whether to use black to autoformat code in returned string representation.</p> <code>comment</code> <code>str</code> <p>Line prefix to use when rendering the evaluated results.</p> <code>terminal</code> <code>bool</code> <p>Whether to apply syntax highlighting to the string representation. Requires optional dependency Pygments.</p> <code>tree</code> <code>Module</code> <p>Parsed LibCST concrete syntax tree of input code.</p> <code>statements</code> <code>List[Statement]</code> <p>List of individual statements parsed from input code.</p> <code>results</code> <code>List[Result]</code> <p>List of evaluated results corresponding to each item of statements.</p> Source code in <code>reprexlite/code.py</code> <pre><code>class CodeBlock:\n    \"\"\"Class that takes a block of Python code input and evaluates it. Call `str(...)` on an\n    instance to get back a string containing the original source with evaluated outputs embedded\n    as comments below each statement.\n\n    Attributes:\n        input (str): Block of Python code\n        style (bool): Whether to use black to autoformat code in returned string representation.\n        comment (str): Line prefix to use when rendering the evaluated results.\n        terminal (bool): Whether to apply syntax highlighting to the string representation.\n            Requires optional dependency Pygments.\n        tree (libcst.Module): Parsed LibCST concrete syntax tree of input code.\n        statements (List[Statement]): List of individual statements parsed from input code.\n        results (List[Result]): List of evaluated results corresponding to each item of statements.\n    \"\"\"\n\n    def __init__(\n        self,\n        input: str,\n        style: bool = False,\n        comment: str = \"#&gt;\",\n        terminal=False,\n        old_results: bool = False,\n    ):\n        \"\"\"Initializer method.\n\n        Args:\n            input (str): Block of Python code\n            style (bool): Whether to use black to autoformat code in returned string\n                representation. Defaults to False.\n            comment (str): Line prefix to use when rendering the evaluated results. Defaults to\n                \"#&gt;\".\n            terminal (bool): Whether to apply syntax highlighting to the string representation.\n                Requires optional dependency Pygments. Defaults to False.\n            old_results (bool): Whether to keep old results, i.e., comment lines in input that\n                match the `comment` prefix. False means these lines are removed, in effect meaning\n                an inputted regex will have its results regenerated. Defaults to False.\n        \"\"\"\n        if any(line.startswith(\"&gt;&gt;&gt;\") for line in input.split(\"\\n\")):\n            input = repl_to_reprex_code(input, comment=comment)\n        if not old_results and comment in input:\n            input = \"\\n\".join(line for line in input.split(\"\\n\") if not line.startswith(comment))\n        self.input: str = input\n        self.terminal = terminal\n        # Parse code\n        self.tree: cst.Module = cst.parse_module(input)\n        self.statements: List[Statement] = [\n            Statement(stmt, style=style) for stmt in self.tree.body\n        ]\n        # Evaluate code\n        self.namespace: dict = {}\n        self.results: List[Result] = [stmt.evaluate(self.namespace) for stmt in self.statements]\n        for res in self.results:\n            res.comment = comment\n\n    def __str__(self):\n        header = cst.Module(body=[], header=self.tree.header).code.strip()\n        code = \"\\n\".join(\n            str(line) for line in chain.from_iterable(zip(self.statements, self.results)) if line\n        )\n        footer = cst.Module(body=[], footer=self.tree.footer).code.strip()\n        out = \"\\n\".join([header, code, footer])\n        if self.terminal:\n            try:\n                from pygments import highlight\n                from pygments.formatters import Terminal256Formatter\n                from pygments.lexers import PythonLexer\n\n                out = highlight(out, PythonLexer(), Terminal256Formatter(style=\"friendly\"))\n            except ImportError:\n                pass\n        return out.strip()\n\n    def _repr_html_(self):\n        out = []\n        try:\n            from pygments import highlight\n            from pygments.formatters import HtmlFormatter\n            from pygments.lexers import PythonLexer\n\n            formatter = HtmlFormatter(style=\"friendly\", wrapcode=True)\n            out.append(f\"&lt;style&gt;{formatter.get_style_defs('.highlight')}&lt;/style&gt;\")\n            out.append(highlight(str(self), PythonLexer(), formatter))\n        except ImportError:\n            out.append(f\"&lt;pre&gt;&lt;code&gt;{self}&lt;/code&gt;&lt;/pre&gt;\")\n        return \"\\n\".join(out)\n</code></pre>"},{"location":"api-reference/code/#reprexlite.code.CodeBlock-attributes","title":"Attributes","text":""},{"location":"api-reference/code/#reprexlite.code.CodeBlock.input","title":"<code>input = input</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/code/#reprexlite.code.CodeBlock.namespace","title":"<code>namespace = {}</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/code/#reprexlite.code.CodeBlock.results","title":"<code>results = [stmt.evaluate(self.namespace) for stmt in self.statements]</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/code/#reprexlite.code.CodeBlock.statements","title":"<code>statements = [Statement(stmt, style=style) for stmt in self.tree.body]</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/code/#reprexlite.code.CodeBlock.terminal","title":"<code>terminal = terminal</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/code/#reprexlite.code.CodeBlock.tree","title":"<code>tree = cst.parse_module(input)</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/code/#reprexlite.code.CodeBlock-functions","title":"Functions","text":""},{"location":"api-reference/code/#reprexlite.code.CodeBlock.__init__","title":"<code>__init__(input, style=False, comment='#&gt;', terminal=False, old_results=False)</code>","text":"<p>Initializer method.</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>str</code> <p>Block of Python code</p> required <code>style</code> <code>bool</code> <p>Whether to use black to autoformat code in returned string representation. Defaults to False.</p> <code>False</code> <code>comment</code> <code>str</code> <p>Line prefix to use when rendering the evaluated results. Defaults to \"#&gt;\".</p> <code>'#&gt;'</code> <code>terminal</code> <code>bool</code> <p>Whether to apply syntax highlighting to the string representation. Requires optional dependency Pygments. Defaults to False.</p> <code>False</code> <code>old_results</code> <code>bool</code> <p>Whether to keep old results, i.e., comment lines in input that match the <code>comment</code> prefix. False means these lines are removed, in effect meaning an inputted regex will have its results regenerated. Defaults to False.</p> <code>False</code> Source code in <code>reprexlite/code.py</code> <pre><code>def __init__(\n    self,\n    input: str,\n    style: bool = False,\n    comment: str = \"#&gt;\",\n    terminal=False,\n    old_results: bool = False,\n):\n    \"\"\"Initializer method.\n\n    Args:\n        input (str): Block of Python code\n        style (bool): Whether to use black to autoformat code in returned string\n            representation. Defaults to False.\n        comment (str): Line prefix to use when rendering the evaluated results. Defaults to\n            \"#&gt;\".\n        terminal (bool): Whether to apply syntax highlighting to the string representation.\n            Requires optional dependency Pygments. Defaults to False.\n        old_results (bool): Whether to keep old results, i.e., comment lines in input that\n            match the `comment` prefix. False means these lines are removed, in effect meaning\n            an inputted regex will have its results regenerated. Defaults to False.\n    \"\"\"\n    if any(line.startswith(\"&gt;&gt;&gt;\") for line in input.split(\"\\n\")):\n        input = repl_to_reprex_code(input, comment=comment)\n    if not old_results and comment in input:\n        input = \"\\n\".join(line for line in input.split(\"\\n\") if not line.startswith(comment))\n    self.input: str = input\n    self.terminal = terminal\n    # Parse code\n    self.tree: cst.Module = cst.parse_module(input)\n    self.statements: List[Statement] = [\n        Statement(stmt, style=style) for stmt in self.tree.body\n    ]\n    # Evaluate code\n    self.namespace: dict = {}\n    self.results: List[Result] = [stmt.evaluate(self.namespace) for stmt in self.statements]\n    for res in self.results:\n        res.comment = comment\n</code></pre>"},{"location":"api-reference/code/#reprexlite.code.Result","title":"<code>Result</code>","text":"<p>Class that holds the result of evaluated code. Use <code>str(...)</code> on an instance to produce a pretty-formatted comment block representation of the result.</p> <p>Attributes:</p> Name Type Description <code>result</code> <code>Any</code> <p>Some Python object, intended to be the return value of evaluated Python code.</p> <code>comment</code> <code>str</code> <p>Line prefix to use when rendering the result for a reprex.</p> Source code in <code>reprexlite/code.py</code> <pre><code>class Result:\n    \"\"\"Class that holds the result of evaluated code. Use `str(...)` on an instance to produce a\n    pretty-formatted comment block representation of the result.\n\n    Attributes:\n        result (Any): Some Python object, intended to be the return value of evaluated Python code.\n        comment (str): Line prefix to use when rendering the result for a reprex.\n    \"\"\"\n\n    def __init__(self, result: Any, stdout: Optional[str] = None, comment: str = \"#&gt;\"):\n        self.result = result\n        self.stdout = stdout\n        self.comment = comment\n\n    def __str__(self) -&gt; str:\n        lines = []\n        if self.stdout:\n            lines.extend(self.stdout.split(\"\\n\"))\n        if self.result is not NO_RETURN and (self.result is not None or not self.stdout):\n            # NO_RETURN -&gt; don't print\n            # None and stdout -&gt; don't print\n            # None and no stdout -&gt; print\n            # Anything else -&gt; print\n            lines.extend(pformat(self.result, indent=2, width=77).split(\"\\n\"))\n        return \"\\n\".join(f\"{self.comment} \" + line for line in lines)\n\n    def __bool__(self) -&gt; bool:\n        # If result is NO_RETURN and blank stdout, nothing to print\n        return self.result is not NO_RETURN or bool(self.stdout)\n</code></pre>"},{"location":"api-reference/code/#reprexlite.code.Result-attributes","title":"Attributes","text":""},{"location":"api-reference/code/#reprexlite.code.Result.comment","title":"<code>comment = comment</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/code/#reprexlite.code.Result.result","title":"<code>result = result</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/code/#reprexlite.code.Result.stdout","title":"<code>stdout = stdout</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/code/#reprexlite.code.Result-functions","title":"Functions","text":""},{"location":"api-reference/code/#reprexlite.code.Result.__init__","title":"<code>__init__(result, stdout=None, comment='#&gt;')</code>","text":"Source code in <code>reprexlite/code.py</code> <pre><code>def __init__(self, result: Any, stdout: Optional[str] = None, comment: str = \"#&gt;\"):\n    self.result = result\n    self.stdout = stdout\n    self.comment = comment\n</code></pre>"},{"location":"api-reference/code/#reprexlite.code.Statement","title":"<code>Statement</code>","text":"<p>Class that holds a LibCST parsed statement. The evaluate method will evaluate the statement and return a <code>Result</code> object. To recover the original source code for an instancement, call <code>str(...)</code> on it. You can optionally autoformat the returned source code, controlled by the <code>style</code> attribute.</p> <p>Attributes:</p> Name Type Description <code>stmt</code> <code>Union[SimpleStatementLine, BaseCompoundStatement]</code> <p>LibCST parsed statement.</p> <code>style</code> <code>bool</code> <p>Whether to autoformat the source code with black.</p> Source code in <code>reprexlite/code.py</code> <pre><code>class Statement:\n    \"\"\"Class that holds a LibCST parsed statement. The evaluate method will evaluate the statement\n    and return a [`Result`][reprexlite.code.Result] object. To recover the original source code\n    for an instancement, call `str(...)` on it. You can optionally autoformat the returned source\n    code, controlled by the `style` attribute.\n\n    Attributes:\n        stmt (Union[libcst.SimpleStatementLine, libcst.BaseCompoundStatement]): LibCST parsed\n            statement.\n        style (bool): Whether to autoformat the source code with black.\n    \"\"\"\n\n    def __init__(\n        self, stmt: Union[cst.SimpleStatementLine, cst.BaseCompoundStatement], style: bool = False\n    ):\n        self.stmt = stmt\n        self.style = style\n\n    def evaluate(self, scope: dict) -&gt; Result:\n        if \"__name__\" not in scope:\n            scope[\"__name__\"] = \"__reprex__\"\n        stdout_io = StringIO()\n        try:\n            with redirect_stdout(stdout_io):\n                try:\n                    result = eval(str(self).strip(), scope)\n                except SyntaxError:\n                    exec(str(self).strip(), scope)\n                    result = NO_RETURN\n            stdout = stdout_io.getvalue().strip()\n        except Exception as exc:\n            result = NO_RETURN\n            # Skip first step of traceback, since that is this evaluate method\n            if exc.__traceback__ is not None:\n                tb = exc.__traceback__.tb_next\n                stdout = (\n                    \"Traceback (most recent call last):\\n\"\n                    + \"\".join(line for line in traceback.format_tb(tb))\n                    + f\"{type(exc).__name__}: {exc}\"\n                )\n        finally:\n            stdout_io.close()\n        return Result(result, stdout=stdout)\n\n    def __str__(self) -&gt; str:\n        code = cst.Module(body=[self.stmt]).code\n        if self.style:\n            try:\n                from black import Mode, format_str\n            except ImportError:\n                raise ImportError(\"Must install black to restyle code.\")\n\n            code = format_str(code, mode=Mode())\n        if code.endswith(\"\\n\"):\n            # Strip trailing newline without stripping deliberate ones.\n            code = code[:-1]\n        return code\n</code></pre>"},{"location":"api-reference/code/#reprexlite.code.Statement-attributes","title":"Attributes","text":""},{"location":"api-reference/code/#reprexlite.code.Statement.stmt","title":"<code>stmt = stmt</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/code/#reprexlite.code.Statement.style","title":"<code>style = style</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/code/#reprexlite.code.Statement-functions","title":"Functions","text":""},{"location":"api-reference/code/#reprexlite.code.Statement.__init__","title":"<code>__init__(stmt, style=False)</code>","text":"Source code in <code>reprexlite/code.py</code> <pre><code>def __init__(\n    self, stmt: Union[cst.SimpleStatementLine, cst.BaseCompoundStatement], style: bool = False\n):\n    self.stmt = stmt\n    self.style = style\n</code></pre>"},{"location":"api-reference/code/#reprexlite.code.Statement.evaluate","title":"<code>evaluate(scope)</code>","text":"Source code in <code>reprexlite/code.py</code> <pre><code>def evaluate(self, scope: dict) -&gt; Result:\n    if \"__name__\" not in scope:\n        scope[\"__name__\"] = \"__reprex__\"\n    stdout_io = StringIO()\n    try:\n        with redirect_stdout(stdout_io):\n            try:\n                result = eval(str(self).strip(), scope)\n            except SyntaxError:\n                exec(str(self).strip(), scope)\n                result = NO_RETURN\n        stdout = stdout_io.getvalue().strip()\n    except Exception as exc:\n        result = NO_RETURN\n        # Skip first step of traceback, since that is this evaluate method\n        if exc.__traceback__ is not None:\n            tb = exc.__traceback__.tb_next\n            stdout = (\n                \"Traceback (most recent call last):\\n\"\n                + \"\".join(line for line in traceback.format_tb(tb))\n                + f\"{type(exc).__name__}: {exc}\"\n            )\n    finally:\n        stdout_io.close()\n    return Result(result, stdout=stdout)\n</code></pre>"},{"location":"api-reference/code/#reprexlite.code-functions","title":"Functions","text":""},{"location":"api-reference/code/#reprexlite.code.repl_to_reprex_code","title":"<code>repl_to_reprex_code(input, comment='#&gt;')</code>","text":"<p>Reformat a code block copied from a Python REPL to a reprex-style code block.</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>str</code> <p>code block</p> required <code>comment</code> <code>str</code> <p>Line prefix to use when rendering the evaluated results. Defaults to \"#&gt;\".</p> <code>'#&gt;'</code> <p>Returns:</p> Type Description <code>str</code> <p>Reformatted code block in reprex-style.</p> Source code in <code>reprexlite/code.py</code> <pre><code>def repl_to_reprex_code(input: str, comment: str = \"#&gt;\") -&gt; str:\n    \"\"\"Reformat a code block copied from a Python REPL to a reprex-style code block.\n\n    Args:\n        input (str): code block\n        comment (str): Line prefix to use when rendering the evaluated results. Defaults to \"#&gt;\".\n\n    Returns:\n        Reformatted code block in reprex-style.\n    \"\"\"\n    out = []\n    for line in input.split(\"\\n\"):\n        if line.startswith(\"&gt;&gt;&gt;\") or line.startswith(\"...\"):\n            out.append(line[4:])\n        elif line.strip() == \"\":\n            out.append(line)\n        else:\n            out.append(comment + \" \" + line)\n    return \"\\n\".join(out)\n</code></pre>"},{"location":"api-reference/formatting/","title":"reprexlite.formatting","text":""},{"location":"api-reference/formatting/#reprexlite.formatting-attributes","title":"Attributes","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.Venue","title":"<code>Venue = Enum('Venue', names={v.upper(): vfor v in venues_dispatcher.keys()}, type=str)</code>  <code>module-attribute</code>","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.venues_dispatcher","title":"<code>venues_dispatcher = {'gh': GitHubReprex, 'so': GitHubReprex, 'ds': GitHubReprex, 'html': HtmlReprex, 'py': PyScriptReprex, 'rtf': RtfReprex, 'slack': SlackReprex}</code>  <code>module-attribute</code>","text":"<p>Mapping from venue keywords to their Reprex implementation.</p>"},{"location":"api-reference/formatting/#reprexlite.formatting-classes","title":"Classes","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.Advertisement","title":"<code>Advertisement</code>","text":"<p>Class for generating the advertisement note for reprexlite.</p> <p>Attributes:</p> Name Type Description <code>timestamp</code> <code>str</code> <p>Timestamp of instance instantiation</p> <code>version</code> <code>str</code> <p>Version of reprexlite</p> Source code in <code>reprexlite/formatting.py</code> <pre><code>class Advertisement:\n    \"\"\"Class for generating the advertisement note for reprexlite.\n\n    Attributes:\n        timestamp (str): Timestamp of instance instantiation\n        version (str): Version of reprexlite\n    \"\"\"\n\n    pkg = \"reprexlite\"\n    url = \"https://github.com/jayqi/reprexlite\"\n\n    def __init__(self):\n        self.timestamp = datetime.now().astimezone().strftime(\"%Y-%m-%d %H:%M:%S %Z\")\n        self.version = f\"v{__version__}\"\n\n    def markdown(self) -&gt; str:\n        \"\"\"Render reprexlite advertisement in GitHub Flavored Markdown.\"\"\"\n        return f\"&lt;sup&gt;Created at {self.timestamp} by [{self.pkg}]({self.url}) {self.version}&lt;/sup&gt;\"\n\n    def html(self) -&gt; str:\n        \"\"\"Render reprexlite advertisement in HTML.\"\"\"\n        return (\n            f\"&lt;p&gt;&lt;sup&gt;Created at {self.timestamp} by \"\n            f'&lt;a href=\"{self.url}\"&gt;{self.pkg}&lt;/a&gt; {self.version}&lt;/sup&gt;&lt;/p&gt;'\n        )\n\n    def code_comment(self) -&gt; str:\n        \"\"\"Render reprexlite advertisement as a comment in Python code.\"\"\"\n        return f\"# {self.text()}\"\n\n    def text(self) -&gt; str:\n        \"\"\"Render reprexlite advertisement in plain text.\"\"\"\n        return f\"Created at {self.timestamp} by {self.pkg} {self.version} &lt;{self.url}&gt;\"\n</code></pre>"},{"location":"api-reference/formatting/#reprexlite.formatting.Advertisement-attributes","title":"Attributes","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.Advertisement.pkg","title":"<code>pkg = 'reprexlite'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.Advertisement.timestamp","title":"<code>timestamp = datetime.now().astimezone().strftime('%Y-%m-%d %H:%M:%S %Z')</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.Advertisement.url","title":"<code>url = 'https://github.com/jayqi/reprexlite'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.Advertisement.version","title":"<code>version = f'v{__version__}'</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.Advertisement-functions","title":"Functions","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.Advertisement.__init__","title":"<code>__init__()</code>","text":"Source code in <code>reprexlite/formatting.py</code> <pre><code>def __init__(self):\n    self.timestamp = datetime.now().astimezone().strftime(\"%Y-%m-%d %H:%M:%S %Z\")\n    self.version = f\"v{__version__}\"\n</code></pre>"},{"location":"api-reference/formatting/#reprexlite.formatting.Advertisement.code_comment","title":"<code>code_comment()</code>","text":"<p>Render reprexlite advertisement as a comment in Python code.</p> Source code in <code>reprexlite/formatting.py</code> <pre><code>def code_comment(self) -&gt; str:\n    \"\"\"Render reprexlite advertisement as a comment in Python code.\"\"\"\n    return f\"# {self.text()}\"\n</code></pre>"},{"location":"api-reference/formatting/#reprexlite.formatting.Advertisement.html","title":"<code>html()</code>","text":"<p>Render reprexlite advertisement in HTML.</p> Source code in <code>reprexlite/formatting.py</code> <pre><code>def html(self) -&gt; str:\n    \"\"\"Render reprexlite advertisement in HTML.\"\"\"\n    return (\n        f\"&lt;p&gt;&lt;sup&gt;Created at {self.timestamp} by \"\n        f'&lt;a href=\"{self.url}\"&gt;{self.pkg}&lt;/a&gt; {self.version}&lt;/sup&gt;&lt;/p&gt;'\n    )\n</code></pre>"},{"location":"api-reference/formatting/#reprexlite.formatting.Advertisement.markdown","title":"<code>markdown()</code>","text":"<p>Render reprexlite advertisement in GitHub Flavored Markdown.</p> Source code in <code>reprexlite/formatting.py</code> <pre><code>def markdown(self) -&gt; str:\n    \"\"\"Render reprexlite advertisement in GitHub Flavored Markdown.\"\"\"\n    return f\"&lt;sup&gt;Created at {self.timestamp} by [{self.pkg}]({self.url}) {self.version}&lt;/sup&gt;\"\n</code></pre>"},{"location":"api-reference/formatting/#reprexlite.formatting.Advertisement.text","title":"<code>text()</code>","text":"<p>Render reprexlite advertisement in plain text.</p> Source code in <code>reprexlite/formatting.py</code> <pre><code>def text(self) -&gt; str:\n    \"\"\"Render reprexlite advertisement in plain text.\"\"\"\n    return f\"Created at {self.timestamp} by {self.pkg} {self.version} &lt;{self.url}&gt;\"\n</code></pre>"},{"location":"api-reference/formatting/#reprexlite.formatting.GitHubReprex","title":"<code>GitHubReprex</code>","text":"<p>               Bases: <code>Reprex</code></p> <p>Concrete implementation for rendering reprexes in GitHub Flavored Markdown.</p> Source code in <code>reprexlite/formatting.py</code> <pre><code>class GitHubReprex(Reprex):\n    \"\"\"Concrete implementation for rendering reprexes in GitHub Flavored Markdown.\"\"\"\n\n    default_advertise: bool = True\n\n    def __str__(self) -&gt; str:\n        out = []\n        out.append(\"```python\")\n        out.append(str(self.code_block))\n        out.append(\"```\")\n        if self.advertise:\n            out.append(\"\\n\" + Advertisement().markdown())\n        if self.session_info:\n            out.append(\"\\n&lt;details&gt;&lt;summary&gt;Session Info&lt;/summary&gt;\")\n            out.append(\"```text\")\n            out.append(str(SessionInfo()))\n            out.append(\"```\")\n            out.append(\"&lt;/details&gt;\")\n        return \"\\n\".join(out)\n</code></pre>"},{"location":"api-reference/formatting/#reprexlite.formatting.GitHubReprex-attributes","title":"Attributes","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.GitHubReprex.advertise","title":"<code>advertise = self.default_advertise if advertise is None else advertise</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.GitHubReprex.code_block","title":"<code>code_block = code_block</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.GitHubReprex.default_advertise","title":"<code>default_advertise = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.GitHubReprex.session_info","title":"<code>session_info = session_info</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.GitHubReprex-functions","title":"Functions","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.GitHubReprex.__init__","title":"<code>__init__(code_block, advertise=None, session_info=False)</code>","text":"Source code in <code>reprexlite/formatting.py</code> <pre><code>def __init__(\n    self, code_block: CodeBlock, advertise: Optional[bool] = None, session_info: bool = False\n):\n    self.code_block: CodeBlock = code_block\n    self.advertise: bool = self.default_advertise if advertise is None else advertise\n    self.session_info: bool = session_info\n</code></pre>"},{"location":"api-reference/formatting/#reprexlite.formatting.HtmlReprex","title":"<code>HtmlReprex</code>","text":"<p>               Bases: <code>Reprex</code></p> <p>Concrete implementation for rendering reprexes in HTML. If optional dependency Pygments is available, the rendered HTML will have syntax highlighting for the Python code.</p> Source code in <code>reprexlite/formatting.py</code> <pre><code>class HtmlReprex(Reprex):\n    \"\"\"Concrete implementation for rendering reprexes in HTML. If optional dependency Pygments is\n    available, the rendered HTML will have syntax highlighting for the Python code.\"\"\"\n\n    default_advertise: bool = True\n\n    def __str__(self) -&gt; str:\n        out = []\n        try:\n            from pygments import highlight\n            from pygments.formatters import HtmlFormatter\n            from pygments.lexers import PythonLexer\n\n            formatter = HtmlFormatter(\n                style=\"friendly\", lineanchors=True, linenos=True, wrapcode=True\n            )\n            out.append(f\"&lt;style&gt;{formatter.get_style_defs('.highlight')}&lt;/style&gt;\")\n            out.append(highlight(str(self.code_block), PythonLexer(), formatter))\n        except ImportError:\n            out.append(f\"&lt;pre&gt;&lt;code&gt;{self.code_block}&lt;/code&gt;&lt;/pre&gt;\")\n\n        if self.advertise:\n            out.append(Advertisement().html())\n        if self.session_info:\n            out.append(\"&lt;details&gt;&lt;summary&gt;Session Info&lt;/summary&gt;\")\n            out.append(f\"&lt;pre&gt;&lt;code&gt;{SessionInfo()}&lt;/code&gt;&lt;/pre&gt;\")\n            out.append(\"&lt;/details&gt;\")\n        return \"\\n\".join(out)\n</code></pre>"},{"location":"api-reference/formatting/#reprexlite.formatting.HtmlReprex-attributes","title":"Attributes","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.HtmlReprex.advertise","title":"<code>advertise = self.default_advertise if advertise is None else advertise</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.HtmlReprex.code_block","title":"<code>code_block = code_block</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.HtmlReprex.default_advertise","title":"<code>default_advertise = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.HtmlReprex.session_info","title":"<code>session_info = session_info</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.HtmlReprex-functions","title":"Functions","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.HtmlReprex.__init__","title":"<code>__init__(code_block, advertise=None, session_info=False)</code>","text":"Source code in <code>reprexlite/formatting.py</code> <pre><code>def __init__(\n    self, code_block: CodeBlock, advertise: Optional[bool] = None, session_info: bool = False\n):\n    self.code_block: CodeBlock = code_block\n    self.advertise: bool = self.default_advertise if advertise is None else advertise\n    self.session_info: bool = session_info\n</code></pre>"},{"location":"api-reference/formatting/#reprexlite.formatting.PyScriptReprex","title":"<code>PyScriptReprex</code>","text":"<p>               Bases: <code>Reprex</code></p> <p>Concrete implementation for rendering reprexes as a Python script.</p> Source code in <code>reprexlite/formatting.py</code> <pre><code>class PyScriptReprex(Reprex):\n    \"\"\"Concrete implementation for rendering reprexes as a Python script.\"\"\"\n\n    default_advertise: bool = False\n\n    def __str__(self) -&gt; str:\n        out = [str(self.code_block)]\n        if self.advertise:\n            out.append(\"\\n\" + Advertisement().code_comment())\n        if self.session_info:\n            out.append(\"\")\n            sess_lines = str(SessionInfo()).split(\"\\n\")\n            out.extend(\"# \" + line for line in sess_lines)\n        return \"\\n\".join(out)\n</code></pre>"},{"location":"api-reference/formatting/#reprexlite.formatting.PyScriptReprex-attributes","title":"Attributes","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.PyScriptReprex.advertise","title":"<code>advertise = self.default_advertise if advertise is None else advertise</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.PyScriptReprex.code_block","title":"<code>code_block = code_block</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.PyScriptReprex.default_advertise","title":"<code>default_advertise = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.PyScriptReprex.session_info","title":"<code>session_info = session_info</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.PyScriptReprex-functions","title":"Functions","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.PyScriptReprex.__init__","title":"<code>__init__(code_block, advertise=None, session_info=False)</code>","text":"Source code in <code>reprexlite/formatting.py</code> <pre><code>def __init__(\n    self, code_block: CodeBlock, advertise: Optional[bool] = None, session_info: bool = False\n):\n    self.code_block: CodeBlock = code_block\n    self.advertise: bool = self.default_advertise if advertise is None else advertise\n    self.session_info: bool = session_info\n</code></pre>"},{"location":"api-reference/formatting/#reprexlite.formatting.Reprex","title":"<code>Reprex</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for a reprex instance. Concrete subclasses should implement the formatting logic appropriate to a specific venue for sharing. Call <code>str(...)</code> on an instance to return the formatted reprex.</p> <p>Attributes:</p> Name Type Description <code>code_block</code> <code>CodeBlock</code> <p>instance of <code>CodeBlock</code></p> <code>advertise</code> <code>bool</code> <p>whether to render reprexlite advertisement</p> <code>session_info</code> <code>bool</code> <p>whether to render session info</p> Source code in <code>reprexlite/formatting.py</code> <pre><code>class Reprex(ABC):\n    \"\"\"Abstract base class for a reprex instance. Concrete subclasses should implement the\n    formatting logic appropriate to a specific venue for sharing. Call `str(...)` on an instance\n    to return the formatted reprex.\n\n    Attributes:\n        code_block (CodeBlock): instance of [`CodeBlock`][reprexlite.code.CodeBlock]\n        advertise (bool): whether to render reprexlite advertisement\n        session_info (bool): whether to render session info\n    \"\"\"\n\n    default_advertise: bool\n    \"\"\"Default for whether to include reprexlite advertisement for this venue format.\"\"\"\n\n    def __init__(\n        self, code_block: CodeBlock, advertise: Optional[bool] = None, session_info: bool = False\n    ):\n        self.code_block: CodeBlock = code_block\n        self.advertise: bool = self.default_advertise if advertise is None else advertise\n        self.session_info: bool = session_info\n\n    @abstractmethod\n    def __str__(self) -&gt; str:  # pragma: no cover\n        pass\n</code></pre>"},{"location":"api-reference/formatting/#reprexlite.formatting.Reprex-attributes","title":"Attributes","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.Reprex.advertise","title":"<code>advertise = self.default_advertise if advertise is None else advertise</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.Reprex.code_block","title":"<code>code_block = code_block</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.Reprex.default_advertise","title":"<code>default_advertise</code>  <code>instance-attribute</code>","text":"<p>Default for whether to include reprexlite advertisement for this venue format.</p>"},{"location":"api-reference/formatting/#reprexlite.formatting.Reprex.session_info","title":"<code>session_info = session_info</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.Reprex-functions","title":"Functions","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.Reprex.__init__","title":"<code>__init__(code_block, advertise=None, session_info=False)</code>","text":"Source code in <code>reprexlite/formatting.py</code> <pre><code>def __init__(\n    self, code_block: CodeBlock, advertise: Optional[bool] = None, session_info: bool = False\n):\n    self.code_block: CodeBlock = code_block\n    self.advertise: bool = self.default_advertise if advertise is None else advertise\n    self.session_info: bool = session_info\n</code></pre>"},{"location":"api-reference/formatting/#reprexlite.formatting.RtfReprex","title":"<code>RtfReprex</code>","text":"<p>               Bases: <code>Reprex</code></p> <p>Concrete implementation for rendering reprexes in Rich Text Format.</p> Source code in <code>reprexlite/formatting.py</code> <pre><code>class RtfReprex(Reprex):\n    \"\"\"Concrete implementation for rendering reprexes in Rich Text Format.\"\"\"\n\n    default_advertise: bool = False\n\n    def __str__(self) -&gt; str:\n        try:\n            from pygments import highlight\n            from pygments.formatters import RtfFormatter\n            from pygments.lexers import PythonLexer\n        except ImportError:\n            raise ImportError(\"Pygments is required for RTF output.\")\n\n        out = str(self.code_block)\n        if self.advertise:\n            out += \"\\n\\n\" + Advertisement().text()\n        if self.session_info:\n            out += \"\\n\\n\" + str(SessionInfo())\n        return highlight(out, PythonLexer(), RtfFormatter())\n</code></pre>"},{"location":"api-reference/formatting/#reprexlite.formatting.RtfReprex-attributes","title":"Attributes","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.RtfReprex.advertise","title":"<code>advertise = self.default_advertise if advertise is None else advertise</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.RtfReprex.code_block","title":"<code>code_block = code_block</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.RtfReprex.default_advertise","title":"<code>default_advertise = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.RtfReprex.session_info","title":"<code>session_info = session_info</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.RtfReprex-functions","title":"Functions","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.RtfReprex.__init__","title":"<code>__init__(code_block, advertise=None, session_info=False)</code>","text":"Source code in <code>reprexlite/formatting.py</code> <pre><code>def __init__(\n    self, code_block: CodeBlock, advertise: Optional[bool] = None, session_info: bool = False\n):\n    self.code_block: CodeBlock = code_block\n    self.advertise: bool = self.default_advertise if advertise is None else advertise\n    self.session_info: bool = session_info\n</code></pre>"},{"location":"api-reference/formatting/#reprexlite.formatting.SlackReprex","title":"<code>SlackReprex</code>","text":"<p>               Bases: <code>Reprex</code></p> <p>Concrete implementation for rendering reprexes as Slack markup.</p> Source code in <code>reprexlite/formatting.py</code> <pre><code>class SlackReprex(Reprex):\n    \"\"\"Concrete implementation for rendering reprexes as Slack markup.\"\"\"\n\n    default_advertise: bool = False\n\n    def __str__(self):\n        out = []\n        out.append(\"```\")\n        out.append(str(self.code_block))\n        out.append(\"```\")\n        if self.advertise:\n            out.append(\"\\n\" + Advertisement().text())\n        if self.session_info:\n            out.append(\"\\n```\")\n            out.append(str(SessionInfo()))\n            out.append(\"```\")\n        return \"\\n\".join(out)\n</code></pre>"},{"location":"api-reference/formatting/#reprexlite.formatting.SlackReprex-attributes","title":"Attributes","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.SlackReprex.advertise","title":"<code>advertise = self.default_advertise if advertise is None else advertise</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.SlackReprex.code_block","title":"<code>code_block = code_block</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.SlackReprex.default_advertise","title":"<code>default_advertise = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.SlackReprex.session_info","title":"<code>session_info = session_info</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.SlackReprex-functions","title":"Functions","text":""},{"location":"api-reference/formatting/#reprexlite.formatting.SlackReprex.__init__","title":"<code>__init__(code_block, advertise=None, session_info=False)</code>","text":"Source code in <code>reprexlite/formatting.py</code> <pre><code>def __init__(\n    self, code_block: CodeBlock, advertise: Optional[bool] = None, session_info: bool = False\n):\n    self.code_block: CodeBlock = code_block\n    self.advertise: bool = self.default_advertise if advertise is None else advertise\n    self.session_info: bool = session_info\n</code></pre>"},{"location":"api-reference/reprex/","title":"reprexlite","text":""},{"location":"api-reference/reprex/#reprexlite.reprex.reprex","title":"<code>reprex(input, outfile=None, venue='gh', advertise=None, session_info=False, style=False, comment='#&gt;', old_results=False, print_=True, terminal=False)</code>","text":"<p>Render reproducible examples of Python code for sharing. This function will evaluate your code and returns an instance of a <code>Reprex</code> subclass. Calling <code>str(...)</code> on the <code>Reprex</code> object will return your code with the evaluated results embedded as comments, plus additional markup appropriate to the sharing venue set by the <code>venue</code> keyword argument.</p> <p>For example, for the <code>gh</code> venue for GitHub Flavored Markdown, you'll get a reprex whose string representation looks like:</p> <pre><code>```python\nx = 2\nx + 2\n#&gt; 4\n```\n\n&lt;sup&gt;Created at 2021-02-15 16:58:47 PST by [reprexlite](https://github.com/jayqi/reprexlite) v0.1.0&lt;/sup&gt;\n</code></pre> <p>The supported <code>venue</code> formats are:</p> <ul> <li><code>gh</code> : GitHub Flavored Markdown</li> <li><code>so</code> : StackOverflow, alias for gh</li> <li><code>ds</code> : Discourse, alias for gh</li> <li><code>html</code> : HTML</li> <li><code>py</code> : Python script</li> <li><code>rtf</code> : Rich Text Format</li> <li><code>slack</code> : Slack</li> </ul> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>str</code> <p>Block of Python code</p> required <code>outfile</code> <code>Optional[Path]</code> <p>Optional file path to write reprex to. Defaults to None.</p> <code>None</code> <code>venue</code> <code>str</code> <p>Determines the output format by the venue you want to share the code. Defaults to \"gh\" for GitHub Flavored Markdown.</p> <code>'gh'</code> <code>advertise</code> <code>Optional[bool]</code> <p>Whether to include a note that links back to the reprexlite package. Default <code>None</code> will use the default set by choice of <code>venue</code>.</p> <code>None</code> <code>session_info</code> <code>bool</code> <p>Whether to include additional details about your Python version, operating system, and installed packages. Defaults to False.</p> <code>False</code> <code>style</code> <code>bool</code> <p>Whether to autoformat your code with black. Defaults to False.</p> <code>False</code> <code>comment</code> <code>str</code> <p>Line prefix to use for displaying evaluated results. Defaults to \"#&gt;\".</p> <code>'#&gt;'</code> <code>old_results</code> <code>bool</code> <p>Whether to keep old results, i.e., comment lines in input that match the <code>comment</code> prefix. False means these lines are removed, in effect meaning an inputted regex will have its results regenerated. Defaults to False.</p> <code>False</code> <code>print_</code> <code>bool</code> <p>Whether to print your reprex to console. Defaults to True.</p> <code>True</code> <code>terminal</code> <code>bool</code> <p>Whether to use syntax highlighting for 256-color terminal display. Requires optional dependency Pygments. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>Reprex</code> <p>Instance of a <code>Reprex</code> concrete subclass for <code>venue</code>.</p> Source code in <code>reprexlite/reprex.py</code> <pre><code>def reprex(\n    input: str,\n    outfile: Optional[Path] = None,\n    venue=\"gh\",\n    advertise: Optional[bool] = None,\n    session_info: bool = False,\n    style: bool = False,\n    comment: str = \"#&gt;\",\n    old_results: bool = False,\n    print_=True,\n    terminal=False,\n) -&gt; Reprex:\n    \"\"\"Render reproducible examples of Python code for sharing. This function will evaluate your\n    code and returns an instance of a [`Reprex`][reprexlite.formatting.Reprex] subclass. Calling\n    `str(...)` on the `Reprex` object will return your code with the evaluated results embedded\n    as comments, plus additional markup appropriate to the sharing venue set by the `venue` keyword\n    argument.\n\n    For example, for the `gh` venue for GitHub Flavored Markdown, you'll get a reprex whose string\n    representation looks like:\n\n    ````\n    ```python\n    x = 2\n    x + 2\n    #&gt; 4\n    ```\n\n    &lt;sup&gt;Created at 2021-02-15 16:58:47 PST by [reprexlite](https://github.com/jayqi/reprexlite) v0.1.0&lt;/sup&gt;\n    ````\n\n    The supported `venue` formats are:\n\n    - `gh` : GitHub Flavored Markdown\n    - `so` : StackOverflow, alias for gh\n    - `ds` : Discourse, alias for gh\n    - `html` : HTML\n    - `py` : Python script\n    - `rtf` : Rich Text Format\n    - `slack` : Slack\n\n    Args:\n        input (str): Block of Python code\n        outfile (Optional[Path]): Optional file path to write reprex to. Defaults to None.\n        venue (str): Determines the output format by the venue you want to share the code. Defaults\n            to \"gh\" for GitHub Flavored Markdown.\n        advertise (Optional[bool]): Whether to include a note that links back to the reprexlite\n            package. Default `None` will use the default set by choice of `venue`.\n        session_info (bool): Whether to include additional details about your Python version,\n            operating system, and installed packages. Defaults to False.\n        style (bool): Whether to autoformat your code with black. Defaults to False.\n        comment (str): Line prefix to use for displaying evaluated results. Defaults to \"#&gt;\".\n        old_results (bool): Whether to keep old results, i.e., comment lines in input that match\n            the `comment` prefix. False means these lines are removed, in effect meaning an\n            inputted regex will have its results regenerated. Defaults to False.\n        print_ (bool): Whether to print your reprex to console. Defaults to True.\n        terminal (bool): Whether to use syntax highlighting for 256-color terminal display.\n            Requires optional dependency Pygments. Defaults to False.\n\n    Returns:\n        Instance of a `Reprex` concrete subclass for `venue`.\n    \"\"\"\n\n    if outfile or venue in [\"html\", \"rtf\"]:\n        # Don't screw output file or lexing for HTML and RTF with terminal syntax highlighting\n        terminal = False\n    code_block = CodeBlock(\n        input, style=style, comment=comment, old_results=old_results, terminal=terminal\n    )\n\n    reprex = venues_dispatcher[venue](\n        code_block=code_block, advertise=advertise, session_info=session_info\n    )\n    if outfile is not None:\n        with outfile.open(\"w\") as fp:\n            fp.write(str(reprex) + \"\\n\")\n    if print_:\n        print(reprex)\n    return reprex\n</code></pre>"},{"location":"api-reference/session_info/","title":"reprexlite.session_info","text":""},{"location":"api-reference/session_info/#reprexlite.session_info-classes","title":"Classes","text":""},{"location":"api-reference/session_info/#reprexlite.session_info.Package","title":"<code>Package</code>","text":"<p>Interface for adapting <code>importlib.metadata.Distribution</code> instances for introspection by <code>SessionInfo</code>.</p> Source code in <code>reprexlite/session_info.py</code> <pre><code>class Package:\n    \"\"\"Interface for adapting [`importlib.metadata.Distribution`](https://docs.python.org/3/library/importlib.metadata.html#distributions)\n    instances for introspection by [`SessionInfo`][reprexlite.session_info.SessionInfo].\n    \"\"\"\n\n    def __init__(self, distribution: importlib_metadata.Distribution):\n        self.distribution = distribution\n\n    @property\n    def name(self) -&gt; str:\n        return self.distribution.metadata[\"Name\"]\n\n    @property\n    def version(self) -&gt; str:\n        return self.distribution.version\n\n    def __lt__(self, other) -&gt; bool:\n        if not isinstance(other, Package):\n            raise ValueError\n        return self.name &lt; other.name\n</code></pre>"},{"location":"api-reference/session_info/#reprexlite.session_info.Package-attributes","title":"Attributes","text":""},{"location":"api-reference/session_info/#reprexlite.session_info.Package.distribution","title":"<code>distribution = distribution</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/session_info/#reprexlite.session_info.Package.name","title":"<code>name</code>  <code>property</code>","text":""},{"location":"api-reference/session_info/#reprexlite.session_info.Package.version","title":"<code>version</code>  <code>property</code>","text":""},{"location":"api-reference/session_info/#reprexlite.session_info.Package-functions","title":"Functions","text":""},{"location":"api-reference/session_info/#reprexlite.session_info.Package.__init__","title":"<code>__init__(distribution)</code>","text":"Source code in <code>reprexlite/session_info.py</code> <pre><code>def __init__(self, distribution: importlib_metadata.Distribution):\n    self.distribution = distribution\n</code></pre>"},{"location":"api-reference/session_info/#reprexlite.session_info.SessionInfo","title":"<code>SessionInfo</code>","text":"<p>Class for pretty-formatting Python session info. Includes details about your Python version, your operating system, and the Python packages installed in your current environment.</p> <p>Attributes:</p> Name Type Description <code>python_version</code> <code>str</code> <p>Python version for current session</p> <code>python_build_date</code> <code>str</code> <p>Date</p> <code>os</code> <code>str</code> <p>OS information for current session</p> <code>packages</code> <code>List[Package]</code> <p>List of Python packages installed in current virtual environment.</p> Source code in <code>reprexlite/session_info.py</code> <pre><code>class SessionInfo:\n    \"\"\"Class for pretty-formatting Python session info. Includes details about your Python version,\n    your operating system, and the Python packages installed in your current environment.\n\n    Attributes:\n        python_version (str): Python version for current session\n        python_build_date (str): Date\n        os (str): OS information for current session\n        packages (List[Package]): List of Python packages installed in current virtual environment.\n    \"\"\"\n\n    def __init__(self):\n        self.python_version: str = platform.python_version()\n        self.python_build_date: str = platform.python_build()[1]\n\n        self.os: str = platform.platform()\n        self.packages: List[Package] = [\n            Package(distr) for distr in importlib_metadata.Distribution.discover()\n        ]\n\n    def __str__(self):\n        lines = [\"-- Session Info --\" + \"-\" * 60]\n        lines += tabulate(\n            [\n                (\"version\", f\"Python {self.python_version} ({self.python_build_date})\"),\n                (\"os\", self.os),\n            ]\n        )\n        lines += [\"-- Packages --\" + \"-\" * 64]\n        lines += tabulate([(pkg.name, pkg.version) for pkg in sorted(self.packages)])\n        return \"\\n\".join(lines).strip()\n</code></pre>"},{"location":"api-reference/session_info/#reprexlite.session_info.SessionInfo-attributes","title":"Attributes","text":""},{"location":"api-reference/session_info/#reprexlite.session_info.SessionInfo.os","title":"<code>os = platform.platform()</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/session_info/#reprexlite.session_info.SessionInfo.packages","title":"<code>packages = [Package(distr) for distr in importlib_metadata.Distribution.discover()]</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/session_info/#reprexlite.session_info.SessionInfo.python_build_date","title":"<code>python_build_date = platform.python_build()[1]</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/session_info/#reprexlite.session_info.SessionInfo.python_version","title":"<code>python_version = platform.python_version()</code>  <code>instance-attribute</code>","text":""},{"location":"api-reference/session_info/#reprexlite.session_info.SessionInfo-functions","title":"Functions","text":""},{"location":"api-reference/session_info/#reprexlite.session_info.SessionInfo.__init__","title":"<code>__init__()</code>","text":"Source code in <code>reprexlite/session_info.py</code> <pre><code>def __init__(self):\n    self.python_version: str = platform.python_version()\n    self.python_build_date: str = platform.python_build()[1]\n\n    self.os: str = platform.platform()\n    self.packages: List[Package] = [\n        Package(distr) for distr in importlib_metadata.Distribution.discover()\n    ]\n</code></pre>"},{"location":"api-reference/session_info/#reprexlite.session_info-functions","title":"Functions","text":""},{"location":"api-reference/session_info/#reprexlite.session_info.tabulate","title":"<code>tabulate(rows)</code>","text":"<p>Utility function for printing a two-column table as text with whitespace padding.</p> <p>Parameters:</p> Name Type Description Default <code>rows</code> <code>List[Tuple[str, str]]</code> <p>Rows of table as tuples of (left cell, right cell)</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>Rows of table formatted as strings with whitespace padding</p> Source code in <code>reprexlite/session_info.py</code> <pre><code>def tabulate(rows: List[Tuple[str, str]]) -&gt; List[str]:\n    \"\"\"Utility function for printing a two-column table as text with whitespace padding.\n\n    Args:\n        rows (List[Tuple[str, str]]): Rows of table as tuples of (left cell, right cell)\n\n    Returns:\n        Rows of table formatted as strings with whitespace padding\n    \"\"\"\n    left_max = max(len(row[0]) for row in rows)\n    out = []\n    for left, right in rows:\n        padding = (left_max + 1 - len(left)) * \" \"\n        out.append(left + padding + right)\n    return out\n</code></pre>"}]}