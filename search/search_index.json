{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"reprexlite: Python reproducible examples for sharing reprexlite is tool for rendering repr oducible ex amples of Python code for sharing. It will execute your code and embed the outputs as comments below their associated lines. The rendered reprex can then be easily copied, pasted, and run as-is by anybody else. It is a lightweight alternative to reprexpy and is similarly meant as a port of the R package reprex . Why reproducible examples? If you're asking for help or reporting a bug, you are more likely to succeed in getting others to help you if you include a good reprex. Why reprexlite? reprexlite helps you create a self-contained reprex that can be easily copy-pasted and run. Your code runs in an isolated namespace. The reprex is formatted so that it is valid Python code with outputs as comments, unlike copying from a REPL. reprexlite is also very lightweight and has a convenient CLI, so you can easily and quickly get it up and running in a virtual environment. Installation reprexlite is available on PyPI: pip install reprexlite Development version The development version of reprexlite is available on GitHub: pip install https://github.com/jayqi/reprexlite.git#egg=reprexlite Quick usage Command-line interface The reprexlite CLI allows you to create a reprex without entering Python. Simply invoke the command reprex This will take you into your system's default command-line text editor where you can type or paste your Python code. On macOS for example, this will be vi . You can set your default editor using the $EDITOR environment variable\u2014I'm personally a fan of nano . Once you're done, reprexlite will print out your reprex to console. Python library from reprexlite import reprex code = \"\"\" arr = [1, 2, 3, 4, 5] [x + 1 for x in arr] \"\"\" print(reprex(code)) Comparison to reprexpy Compared to reprexpy, reprexlite adds: A command-line interface so you can create reprexes without entering Python Lighter dependencies (e.g., no dependence on IPython) However, reprexlite does not have: Direct ability to read from or write to your OS clipboard. Instead, the CLI opens your default text editor which you can paste into. Automatic upload of matplotlib plots to imgur.com.","title":"Home"},{"location":"#reprexlite-python-reproducible-examples-for-sharing","text":"reprexlite is tool for rendering repr oducible ex amples of Python code for sharing. It will execute your code and embed the outputs as comments below their associated lines. The rendered reprex can then be easily copied, pasted, and run as-is by anybody else. It is a lightweight alternative to reprexpy and is similarly meant as a port of the R package reprex .","title":"reprexlite: Python reproducible examples for sharing"},{"location":"#why-reproducible-examples","text":"If you're asking for help or reporting a bug, you are more likely to succeed in getting others to help you if you include a good reprex.","title":"Why reproducible examples?"},{"location":"#why-reprexlite","text":"reprexlite helps you create a self-contained reprex that can be easily copy-pasted and run. Your code runs in an isolated namespace. The reprex is formatted so that it is valid Python code with outputs as comments, unlike copying from a REPL. reprexlite is also very lightweight and has a convenient CLI, so you can easily and quickly get it up and running in a virtual environment.","title":"Why reprexlite?"},{"location":"#installation","text":"reprexlite is available on PyPI: pip install reprexlite","title":"Installation"},{"location":"#development-version","text":"The development version of reprexlite is available on GitHub: pip install https://github.com/jayqi/reprexlite.git#egg=reprexlite","title":"Development version"},{"location":"#quick-usage","text":"","title":"Quick usage"},{"location":"#command-line-interface","text":"The reprexlite CLI allows you to create a reprex without entering Python. Simply invoke the command reprex This will take you into your system's default command-line text editor where you can type or paste your Python code. On macOS for example, this will be vi . You can set your default editor using the $EDITOR environment variable\u2014I'm personally a fan of nano . Once you're done, reprexlite will print out your reprex to console.","title":"Command-line interface"},{"location":"#python-library","text":"from reprexlite import reprex code = \"\"\" arr = [1, 2, 3, 4, 5] [x + 1 for x in arr] \"\"\" print(reprex(code))","title":"Python library"},{"location":"#comparison-to-reprexpy","text":"Compared to reprexpy, reprexlite adds: A command-line interface so you can create reprexes without entering Python Lighter dependencies (e.g., no dependence on IPython) However, reprexlite does not have: Direct ability to read from or write to your OS clipboard. Instead, the CLI opens your default text editor which you can paste into. Automatic upload of matplotlib plots to imgur.com.","title":"Comparison to reprexpy"},{"location":"changelog/","text":"reprexlite Changelog v0.1.0 (Unreleased) Initial release! \ud83c\udf89","title":"Changelog"},{"location":"changelog/#reprexlite-changelog","text":"","title":"reprexlite Changelog"},{"location":"changelog/#v010-unreleased","text":"Initial release! \ud83c\udf89","title":"v0.1.0 (Unreleased)"},{"location":"cli/","text":"CLI Help Documentation reprex --help Usage: reprex [OPTIONS] Render reproducible examples of Python code for sharing. Your code will be executed and the results will be embedded as comments below their associated lines. By default, your system's default command-line text editor will open for you to type or paste in your code. This editor can be changed by setting the EDITOR environment variable. The supported venue formats are: - gh : GitHub Flavored Markdown - so : StackOverflow, alias for gh - ds : Discourse, alias for gh - html : HTML - py : Python script - rtf : Rich Text Format - slack : Slack Options: -i, --infile PATH Read code from an input file instead via editor. -o, --outfile PATH Write output to file instead of printing to console. -v, --venue [gh|so|ds|html|py|rtf|slack] Output format appropriate to the venue where you plan to share this code. [default: gh] --advertise / --no-advertise Whether to include footer that credits reprexlite. If unspecified, will depend on specified venue's default. --session-info Whether to include details about session and installed packages. --style Autoformat code with black. Requires black to be installed. --comment TEXT Comment prefix to use for results returned by expressions. [default: #>] --version Show reprexlite version and exit. --install-completion [bash|zsh|fish|powershell|pwsh] Install completion for the specified shell. --show-completion [bash|zsh|fish|powershell|pwsh] Show completion for the specified shell, to copy it or customize the installation. --help Show this message and exit.","title":"CLI Help"},{"location":"cli/#cli-help-documentation","text":"reprex --help Usage: reprex [OPTIONS] Render reproducible examples of Python code for sharing. Your code will be executed and the results will be embedded as comments below their associated lines. By default, your system's default command-line text editor will open for you to type or paste in your code. This editor can be changed by setting the EDITOR environment variable. The supported venue formats are: - gh : GitHub Flavored Markdown - so : StackOverflow, alias for gh - ds : Discourse, alias for gh - html : HTML - py : Python script - rtf : Rich Text Format - slack : Slack Options: -i, --infile PATH Read code from an input file instead via editor. -o, --outfile PATH Write output to file instead of printing to console. -v, --venue [gh|so|ds|html|py|rtf|slack] Output format appropriate to the venue where you plan to share this code. [default: gh] --advertise / --no-advertise Whether to include footer that credits reprexlite. If unspecified, will depend on specified venue's default. --session-info Whether to include details about session and installed packages. --style Autoformat code with black. Requires black to be installed. --comment TEXT Comment prefix to use for results returned by expressions. [default: #>] --version Show reprexlite version and exit. --install-completion [bash|zsh|fish|powershell|pwsh] Install completion for the specified shell. --show-completion [bash|zsh|fish|powershell|pwsh] Show completion for the specified shell, to copy it or customize the installation. --help Show this message and exit.","title":"CLI Help Documentation"},{"location":"api-reference/code/","text":"reprexlite.code NO_RETURN CodeBlock Class that takes Python code input and renders as a reprex output. __init__ ( self , input : str , style : bool = False , comment : str = '#>' , terminal = False ) special Source code in reprexlite/code.py def __init__ ( self , input : str , style : bool = False , comment : str = \"#>\" , terminal = False ): self . input : str = input self . terminal = terminal # Parse code self . tree : cst . Module = cst . parse_module ( input ) self . statements : List [ Statement ] = [ Statement ( stmt , style = style ) for stmt in self . tree . body ] # Evaluate code self . namespace : dict = {} self . results : List [ Result ] = [ stmt . evaluate ( self . namespace ) for stmt in self . statements ] for res in self . results : res . comment = comment Result Class that holds the result of evaluated code and generates a pretty-formatted string represetation. __init__ ( self , result : Any , comment : str = '#>' ) special Source code in reprexlite/code.py def __init__ ( self , result : Any , comment : str = \"#>\" ): self . result = result self . comment = comment Statement Class that holds a LibCST parsed statement. It can evaluate it and return a Result, and it reproduces the source code as a string. __init__ ( self , stmt : Union [ libcst . _nodes . statement . SimpleStatementLine , libcst . _nodes . statement . BaseCompoundStatement ], style : bool = False ) special Source code in reprexlite/code.py def __init__ ( self , stmt : Union [ cst . SimpleStatementLine , cst . BaseCompoundStatement ], style : bool = False ): self . stmt = stmt self . style = style evaluate ( self , scope : dict ) -> Result Source code in reprexlite/code.py def evaluate ( self , scope : dict ) -> Result : try : return Result ( eval ( str ( self ), scope , scope )) except SyntaxError : exec ( str ( self ), scope , scope ) return Result ( NO_RETURN )","title":"reprexlite.code"},{"location":"api-reference/code/#reprexlitecode","text":"","title":"reprexlite.code"},{"location":"api-reference/code/#reprexlite.code.NO_RETURN","text":"","title":"NO_RETURN"},{"location":"api-reference/code/#reprexlite.code.CodeBlock","text":"Class that takes Python code input and renders as a reprex output.","title":"CodeBlock"},{"location":"api-reference/code/#reprexlite.code.CodeBlock.__init__","text":"Source code in reprexlite/code.py def __init__ ( self , input : str , style : bool = False , comment : str = \"#>\" , terminal = False ): self . input : str = input self . terminal = terminal # Parse code self . tree : cst . Module = cst . parse_module ( input ) self . statements : List [ Statement ] = [ Statement ( stmt , style = style ) for stmt in self . tree . body ] # Evaluate code self . namespace : dict = {} self . results : List [ Result ] = [ stmt . evaluate ( self . namespace ) for stmt in self . statements ] for res in self . results : res . comment = comment","title":"__init__()"},{"location":"api-reference/code/#reprexlite.code.Result","text":"Class that holds the result of evaluated code and generates a pretty-formatted string represetation.","title":"Result"},{"location":"api-reference/code/#reprexlite.code.Result.__init__","text":"Source code in reprexlite/code.py def __init__ ( self , result : Any , comment : str = \"#>\" ): self . result = result self . comment = comment","title":"__init__()"},{"location":"api-reference/code/#reprexlite.code.Statement","text":"Class that holds a LibCST parsed statement. It can evaluate it and return a Result, and it reproduces the source code as a string.","title":"Statement"},{"location":"api-reference/code/#reprexlite.code.Statement.__init__","text":"Source code in reprexlite/code.py def __init__ ( self , stmt : Union [ cst . SimpleStatementLine , cst . BaseCompoundStatement ], style : bool = False ): self . stmt = stmt self . style = style","title":"__init__()"},{"location":"api-reference/code/#reprexlite.code.Statement.evaluate","text":"Source code in reprexlite/code.py def evaluate ( self , scope : dict ) -> Result : try : return Result ( eval ( str ( self ), scope , scope )) except SyntaxError : exec ( str ( self ), scope , scope ) return Result ( NO_RETURN )","title":"evaluate()"},{"location":"api-reference/reprex/","text":"reprexlite.reprex venues_dispatcher : Dict [ str , Callable ] Advertisement pkg url __init__ ( self ) special Source code in reprexlite/reprex.py def __init__ ( self ): now = datetime . now () . astimezone () . strftime ( \"%Y-%m- %d %H:%M:%S %Z\" ) self . created = f \"Created at { now } by\" self . ver = f \"v { __version__ } \" code_comment ( self ) -> str Source code in reprexlite/reprex.py def code_comment ( self ) -> str : return f \"# { self . created } { self . pkg } { self . ver } < { self . url } >\" html ( self ) -> str Source code in reprexlite/reprex.py def html ( self ) -> str : return f '<p><sup> { self . created } <a href=\" { self . url } \"> { self . pkg } </a> { self . ver } </sup></p>' markdown ( self ) -> str Source code in reprexlite/reprex.py def markdown ( self ) -> str : return f \"<sup> { self . created } [ { self . pkg } ]( { self . url } ) { self . ver } </sup>\" text ( self ) -> str Source code in reprexlite/reprex.py def text ( self ) -> str : return f \" { self . created } { self . pkg } { self . ver } < { self . url } >\" GitHubReprex default_advertise : bool __init__ ( self , code_block : CodeBlock , advertise : Optional [ bool ] = None , session_info : bool = False ) inherited special Source code in reprexlite/reprex.py def __init__ ( self , code_block : CodeBlock , advertise : Optional [ bool ] = None , session_info : bool = False ): self . code_block = code_block self . advertise = self . default_advertise if advertise is None else advertise self . session_info = session_info HtmlReprex default_advertise : bool __init__ ( self , code_block : CodeBlock , advertise : Optional [ bool ] = None , session_info : bool = False ) inherited special Source code in reprexlite/reprex.py def __init__ ( self , code_block : CodeBlock , advertise : Optional [ bool ] = None , session_info : bool = False ): self . code_block = code_block self . advertise = self . default_advertise if advertise is None else advertise self . session_info = session_info PyScriptReprex default_advertise : bool __init__ ( self , code_block : CodeBlock , advertise : Optional [ bool ] = None , session_info : bool = False ) inherited special Source code in reprexlite/reprex.py def __init__ ( self , code_block : CodeBlock , advertise : Optional [ bool ] = None , session_info : bool = False ): self . code_block = code_block self . advertise = self . default_advertise if advertise is None else advertise self . session_info = session_info Reprex __init__ ( self , code_block : CodeBlock , advertise : Optional [ bool ] = None , session_info : bool = False ) special Source code in reprexlite/reprex.py def __init__ ( self , code_block : CodeBlock , advertise : Optional [ bool ] = None , session_info : bool = False ): self . code_block = code_block self . advertise = self . default_advertise if advertise is None else advertise self . session_info = session_info RtfReprex default_advertise : bool __init__ ( self , code_block : CodeBlock , advertise : Optional [ bool ] = None , session_info : bool = False ) inherited special Source code in reprexlite/reprex.py def __init__ ( self , code_block : CodeBlock , advertise : Optional [ bool ] = None , session_info : bool = False ): self . code_block = code_block self . advertise = self . default_advertise if advertise is None else advertise self . session_info = session_info SlackReprex default_advertise : bool __init__ ( self , code_block : CodeBlock , advertise : Optional [ bool ] = None , session_info : bool = False ) inherited special Source code in reprexlite/reprex.py def __init__ ( self , code_block : CodeBlock , advertise : Optional [ bool ] = None , session_info : bool = False ): self . code_block = code_block self . advertise = self . default_advertise if advertise is None else advertise self . session_info = session_info Venue An enumeration. reprex ( input : str , outfile : Optional [ pathlib . Path ] = None , venue = 'gh' , advertise : Optional [ bool ] = None , session_info : bool = False , style : bool = False , comment : str = '#>' , print_ = True , terminal = False ) -> Reprex Source code in reprexlite/reprex.py def reprex ( input : str , outfile : Optional [ Path ] = None , venue = \"gh\" , advertise : Optional [ bool ] = None , session_info : bool = False , style : bool = False , comment : str = \"#>\" , print_ = True , terminal = False , ) -> Reprex : if outfile or venue in [ \"html\" , \"rtf\" ]: # Don't screw output file or lexing for HTML and RTF terminal = False code_block = CodeBlock ( input , style = style , comment = comment , terminal = terminal ) reprex = venues_dispatcher [ venue ]( code_block = code_block , advertise = advertise , session_info = session_info ) if outfile is not None : with outfile . open ( \"w\" ) as fp : fp . write ( str ( reprex ) + \" \\n \" ) if print_ : print ( reprex ) return reprex","title":"reprexlite.reprex"},{"location":"api-reference/reprex/#reprexlitereprex","text":"","title":"reprexlite.reprex"},{"location":"api-reference/reprex/#reprexlite.reprex.venues_dispatcher","text":"","title":"venues_dispatcher"},{"location":"api-reference/reprex/#reprexlite.reprex.Advertisement","text":"","title":"Advertisement"},{"location":"api-reference/reprex/#reprexlite.reprex.Advertisement.pkg","text":"","title":"pkg"},{"location":"api-reference/reprex/#reprexlite.reprex.Advertisement.url","text":"","title":"url"},{"location":"api-reference/reprex/#reprexlite.reprex.Advertisement.__init__","text":"Source code in reprexlite/reprex.py def __init__ ( self ): now = datetime . now () . astimezone () . strftime ( \"%Y-%m- %d %H:%M:%S %Z\" ) self . created = f \"Created at { now } by\" self . ver = f \"v { __version__ } \"","title":"__init__()"},{"location":"api-reference/reprex/#reprexlite.reprex.Advertisement.code_comment","text":"Source code in reprexlite/reprex.py def code_comment ( self ) -> str : return f \"# { self . created } { self . pkg } { self . ver } < { self . url } >\"","title":"code_comment()"},{"location":"api-reference/reprex/#reprexlite.reprex.Advertisement.html","text":"Source code in reprexlite/reprex.py def html ( self ) -> str : return f '<p><sup> { self . created } <a href=\" { self . url } \"> { self . pkg } </a> { self . ver } </sup></p>'","title":"html()"},{"location":"api-reference/reprex/#reprexlite.reprex.Advertisement.markdown","text":"Source code in reprexlite/reprex.py def markdown ( self ) -> str : return f \"<sup> { self . created } [ { self . pkg } ]( { self . url } ) { self . ver } </sup>\"","title":"markdown()"},{"location":"api-reference/reprex/#reprexlite.reprex.Advertisement.text","text":"Source code in reprexlite/reprex.py def text ( self ) -> str : return f \" { self . created } { self . pkg } { self . ver } < { self . url } >\"","title":"text()"},{"location":"api-reference/reprex/#reprexlite.reprex.GitHubReprex","text":"","title":"GitHubReprex"},{"location":"api-reference/reprex/#reprexlite.reprex.GitHubReprex.default_advertise","text":"","title":"default_advertise"},{"location":"api-reference/reprex/#reprexlite.reprex.GitHubReprex.__init__","text":"Source code in reprexlite/reprex.py def __init__ ( self , code_block : CodeBlock , advertise : Optional [ bool ] = None , session_info : bool = False ): self . code_block = code_block self . advertise = self . default_advertise if advertise is None else advertise self . session_info = session_info","title":"__init__()"},{"location":"api-reference/reprex/#reprexlite.reprex.HtmlReprex","text":"","title":"HtmlReprex"},{"location":"api-reference/reprex/#reprexlite.reprex.HtmlReprex.default_advertise","text":"","title":"default_advertise"},{"location":"api-reference/reprex/#reprexlite.reprex.HtmlReprex.__init__","text":"Source code in reprexlite/reprex.py def __init__ ( self , code_block : CodeBlock , advertise : Optional [ bool ] = None , session_info : bool = False ): self . code_block = code_block self . advertise = self . default_advertise if advertise is None else advertise self . session_info = session_info","title":"__init__()"},{"location":"api-reference/reprex/#reprexlite.reprex.PyScriptReprex","text":"","title":"PyScriptReprex"},{"location":"api-reference/reprex/#reprexlite.reprex.PyScriptReprex.default_advertise","text":"","title":"default_advertise"},{"location":"api-reference/reprex/#reprexlite.reprex.PyScriptReprex.__init__","text":"Source code in reprexlite/reprex.py def __init__ ( self , code_block : CodeBlock , advertise : Optional [ bool ] = None , session_info : bool = False ): self . code_block = code_block self . advertise = self . default_advertise if advertise is None else advertise self . session_info = session_info","title":"__init__()"},{"location":"api-reference/reprex/#reprexlite.reprex.Reprex","text":"","title":"Reprex"},{"location":"api-reference/reprex/#reprexlite.reprex.Reprex.__init__","text":"Source code in reprexlite/reprex.py def __init__ ( self , code_block : CodeBlock , advertise : Optional [ bool ] = None , session_info : bool = False ): self . code_block = code_block self . advertise = self . default_advertise if advertise is None else advertise self . session_info = session_info","title":"__init__()"},{"location":"api-reference/reprex/#reprexlite.reprex.RtfReprex","text":"","title":"RtfReprex"},{"location":"api-reference/reprex/#reprexlite.reprex.RtfReprex.default_advertise","text":"","title":"default_advertise"},{"location":"api-reference/reprex/#reprexlite.reprex.RtfReprex.__init__","text":"Source code in reprexlite/reprex.py def __init__ ( self , code_block : CodeBlock , advertise : Optional [ bool ] = None , session_info : bool = False ): self . code_block = code_block self . advertise = self . default_advertise if advertise is None else advertise self . session_info = session_info","title":"__init__()"},{"location":"api-reference/reprex/#reprexlite.reprex.SlackReprex","text":"","title":"SlackReprex"},{"location":"api-reference/reprex/#reprexlite.reprex.SlackReprex.default_advertise","text":"","title":"default_advertise"},{"location":"api-reference/reprex/#reprexlite.reprex.SlackReprex.__init__","text":"Source code in reprexlite/reprex.py def __init__ ( self , code_block : CodeBlock , advertise : Optional [ bool ] = None , session_info : bool = False ): self . code_block = code_block self . advertise = self . default_advertise if advertise is None else advertise self . session_info = session_info","title":"__init__()"},{"location":"api-reference/reprex/#reprexlite.reprex.Venue","text":"An enumeration.","title":"Venue"},{"location":"api-reference/reprex/#reprexlite.reprex.reprex","text":"Source code in reprexlite/reprex.py def reprex ( input : str , outfile : Optional [ Path ] = None , venue = \"gh\" , advertise : Optional [ bool ] = None , session_info : bool = False , style : bool = False , comment : str = \"#>\" , print_ = True , terminal = False , ) -> Reprex : if outfile or venue in [ \"html\" , \"rtf\" ]: # Don't screw output file or lexing for HTML and RTF terminal = False code_block = CodeBlock ( input , style = style , comment = comment , terminal = terminal ) reprex = venues_dispatcher [ venue ]( code_block = code_block , advertise = advertise , session_info = session_info ) if outfile is not None : with outfile . open ( \"w\" ) as fp : fp . write ( str ( reprex ) + \" \\n \" ) if print_ : print ( reprex ) return reprex","title":"reprex()"},{"location":"api-reference/session_info/","text":"reprexlite.session_info Package name : str property readonly version : str property readonly __init__ ( self , distribution : Distribution ) special Source code in reprexlite/session_info.py def __init__ ( self , distribution : importlib_metadata . Distribution ): self . distribution = distribution SessionInfo __init__ ( self ) special Source code in reprexlite/session_info.py def __init__ ( self ): self . python_version = platform . python_version () self . python_build_date = platform . python_build ()[ 1 ] self . os = platform . platform () self . packages = [ Package ( distr ) for distr in importlib_metadata . Distribution . discover ()] tabulate ( rows : List [ Tuple [ str , str ]]) -> List [ str ] Source code in reprexlite/session_info.py def tabulate ( rows : List [ Tuple [ str , str ]]) -> List [ str ]: left_max = max ( len ( row [ 0 ]) for row in rows ) out = [] for left , right in rows : padding = ( left_max + 1 - len ( left )) * \" \" out . append ( left + padding + right ) return out","title":"reprexlite.session_info"},{"location":"api-reference/session_info/#reprexlitesession_info","text":"","title":"reprexlite.session_info"},{"location":"api-reference/session_info/#reprexlite.session_info.Package","text":"","title":"Package"},{"location":"api-reference/session_info/#reprexlite.session_info.Package.name","text":"","title":"name"},{"location":"api-reference/session_info/#reprexlite.session_info.Package.version","text":"","title":"version"},{"location":"api-reference/session_info/#reprexlite.session_info.Package.__init__","text":"Source code in reprexlite/session_info.py def __init__ ( self , distribution : importlib_metadata . Distribution ): self . distribution = distribution","title":"__init__()"},{"location":"api-reference/session_info/#reprexlite.session_info.SessionInfo","text":"","title":"SessionInfo"},{"location":"api-reference/session_info/#reprexlite.session_info.SessionInfo.__init__","text":"Source code in reprexlite/session_info.py def __init__ ( self ): self . python_version = platform . python_version () self . python_build_date = platform . python_build ()[ 1 ] self . os = platform . platform () self . packages = [ Package ( distr ) for distr in importlib_metadata . Distribution . discover ()]","title":"__init__()"},{"location":"api-reference/session_info/#reprexlite.session_info.tabulate","text":"Source code in reprexlite/session_info.py def tabulate ( rows : List [ Tuple [ str , str ]]) -> List [ str ]: left_max = max ( len ( row [ 0 ]) for row in rows ) out = [] for left , right in rows : padding = ( left_max + 1 - len ( left )) * \" \" out . append ( left + padding + right ) return out","title":"tabulate()"}]}