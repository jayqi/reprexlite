{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"reprexlite: Python reproducible examples for sharing \u00b6 reprexlite is a tool for rendering repr oducible ex amples of Python code for sharing. With a convenient CLI and lightweight dependencies, you can quickly get it up and running in any virtual environment. Paste or type some Python code that you're interested in sharing. reprexlite will execute that code in an isolated namespace. Any returned values or standard output will be captured and displayed as comments below their associated code. The rendered reprex will be printed for you to share. Its format can be easily copied, pasted, and run as-is by someone else. Here's an example of an outputted reprex: from itertools import product grid = list ( product ([ 1 , 2 , 3 ], [ 8 , 16 ])) grid #> [(1, 8), (1, 16), (2, 8), (2, 16), (3, 8), (3, 16)] list ( zip ( * grid )) #> [(1, 1, 2, 2, 3, 3), (8, 16, 8, 16, 8, 16)] Writing a good reprex takes thought and effort (see \"Reprex Do's and Don'ts\" for tips). The goal of reprexlite is to be a tool that seamlessly handles the mechanical stuff, so you can devote your full attention to the important, creative work of writing the content. Reprex-style code formatting\u2014namely, with outputs as comments\u2014is also great for documentation. Users can copy and run with no modification. Consider using reprexlite when writing your documentation instead of copying code with >>> prompts from an interactive Python shell. reprexlite is a lightweight alternative to reprexpy and is similarly meant as a port of the R package reprex . Why reproducible examples? \u00b6 If you're asking for help or reporting a bug, you are more likely to succeed in getting others to help you if you include a good reprex. If you're writing documentation, your readers will appreciate examples that they can easily run. See \"Design Philosophy\" for more on both \"Why reproducible examples?\" and \"Why reprexlite?\" Installation \u00b6 reprexlite is available on PyPI: pip install reprexlite Optional dependencies can be specified using the \"extras\" mechanism , e.g., reprexlite[black] . Available extras are: black : for optionally autoformatting your code pygments : for syntax highlighting and the RTF venue Development version \u00b6 The development version of reprexlite is available on GitHub: pip install https://github.com/jayqi/reprexlite.git#egg = reprexlite Quick usage \u00b6 Command-line interface \u00b6 The reprexlite CLI allows you to create a reprex without entering a Python session. Simply invoke the command: reprex This will take you into your system's default command-line text editor where you can type or paste your Python code. On macOS, for example, this will be vim . You can set your default editor using the $EDITOR environment variable\u2014I'm personally a fan of nano . Once you're done, reprexlite will print out your reprex to console. To see available options, use the --help flag. Python library \u00b6 The same functionality as the CLI is also available from the reprex function with an equivalent API. Simply pass a string with your code, and it will print out the reprex, as well as return a Reprex object that contains all the data and formatting machinery. See the API documentation for more details. from reprexlite import reprex code = \"\"\" from itertools import product grid = list(product([1, 2, 3], [8, 16])) grid list(zip(*grid)) \"\"\" reprex ( code ) #> ```python #> from itertools import product #> #> grid = list(product([1, 2, 3], [8, 16])) #> grid #> #> [(1, 8), (1, 16), (2, 8), (2, 16), (3, 8), (3, 16)] #> list(zip(*grid)) #> #> [(1, 1, 2, 2, 3, 3), (8, 16, 8, 16, 8, 16)] #> ``` #> #> <sup>Created at 2021-02-26 00:32:00 PST by [reprexlite](https://github.com/jayqi/reprexlite) v0.3.0</sup> #> <reprexlite.formatting.GitHubReprex object at 0x109059f10>","title":"Home"},{"location":"#reprexlite-python-reproducible-examples-for-sharing","text":"reprexlite is a tool for rendering repr oducible ex amples of Python code for sharing. With a convenient CLI and lightweight dependencies, you can quickly get it up and running in any virtual environment. Paste or type some Python code that you're interested in sharing. reprexlite will execute that code in an isolated namespace. Any returned values or standard output will be captured and displayed as comments below their associated code. The rendered reprex will be printed for you to share. Its format can be easily copied, pasted, and run as-is by someone else. Here's an example of an outputted reprex: from itertools import product grid = list ( product ([ 1 , 2 , 3 ], [ 8 , 16 ])) grid #> [(1, 8), (1, 16), (2, 8), (2, 16), (3, 8), (3, 16)] list ( zip ( * grid )) #> [(1, 1, 2, 2, 3, 3), (8, 16, 8, 16, 8, 16)] Writing a good reprex takes thought and effort (see \"Reprex Do's and Don'ts\" for tips). The goal of reprexlite is to be a tool that seamlessly handles the mechanical stuff, so you can devote your full attention to the important, creative work of writing the content. Reprex-style code formatting\u2014namely, with outputs as comments\u2014is also great for documentation. Users can copy and run with no modification. Consider using reprexlite when writing your documentation instead of copying code with >>> prompts from an interactive Python shell. reprexlite is a lightweight alternative to reprexpy and is similarly meant as a port of the R package reprex .","title":"reprexlite: Python reproducible examples for sharing"},{"location":"#why-reproducible-examples","text":"If you're asking for help or reporting a bug, you are more likely to succeed in getting others to help you if you include a good reprex. If you're writing documentation, your readers will appreciate examples that they can easily run. See \"Design Philosophy\" for more on both \"Why reproducible examples?\" and \"Why reprexlite?\"","title":"Why reproducible examples?"},{"location":"#installation","text":"reprexlite is available on PyPI: pip install reprexlite Optional dependencies can be specified using the \"extras\" mechanism , e.g., reprexlite[black] . Available extras are: black : for optionally autoformatting your code pygments : for syntax highlighting and the RTF venue","title":"Installation"},{"location":"#development-version","text":"The development version of reprexlite is available on GitHub: pip install https://github.com/jayqi/reprexlite.git#egg = reprexlite","title":"Development version"},{"location":"#quick-usage","text":"","title":"Quick usage"},{"location":"#command-line-interface","text":"The reprexlite CLI allows you to create a reprex without entering a Python session. Simply invoke the command: reprex This will take you into your system's default command-line text editor where you can type or paste your Python code. On macOS, for example, this will be vim . You can set your default editor using the $EDITOR environment variable\u2014I'm personally a fan of nano . Once you're done, reprexlite will print out your reprex to console. To see available options, use the --help flag.","title":"Command-line interface"},{"location":"#python-library","text":"The same functionality as the CLI is also available from the reprex function with an equivalent API. Simply pass a string with your code, and it will print out the reprex, as well as return a Reprex object that contains all the data and formatting machinery. See the API documentation for more details. from reprexlite import reprex code = \"\"\" from itertools import product grid = list(product([1, 2, 3], [8, 16])) grid list(zip(*grid)) \"\"\" reprex ( code ) #> ```python #> from itertools import product #> #> grid = list(product([1, 2, 3], [8, 16])) #> grid #> #> [(1, 8), (1, 16), (2, 8), (2, 16), (3, 8), (3, 16)] #> list(zip(*grid)) #> #> [(1, 1, 2, 2, 3, 3), (8, 16, 8, 16, 8, 16)] #> ``` #> #> <sup>Created at 2021-02-26 00:32:00 PST by [reprexlite](https://github.com/jayqi/reprexlite) v0.3.0</sup> #> <reprexlite.formatting.GitHubReprex object at 0x109059f10>","title":"Python library"},{"location":"changelog/","text":"reprexlite Changelog \u00b6 v0.3.1 (2021-02-26) \u00b6 Documentation improvements. ( #14 , #19 ) v0.3.0 (2021-02-25) \u00b6 Changed pygments styling to use the \"friendly\" color scheme, which looks better for dark backgrounds. ( #15 ) Changed submodule organization for code related to reprex formatting. This is now in the formatting submodule. ( #17 ) v0.2.0 (2021-02-20) \u00b6 Removing old results from inputs: ( #8 ) Changed reprexes to\u2014by default\u2014remove lines matching the comment prefix ( #> by default). This means that if your input code is a previously rendered reprex, the old results will be removed first and you effectively regenerate it. Added a new option old_results that\u2014if set to True\u2014will preserve such lines. Fixed a bug that caused intentional blank lines to be removed. ( #7 ) Added stdout capturing. Any content printed to stdout will be shown as a result in the reprex. ( #10 ) Added exception handling and stacktrace capture. If the input code has an exception, the stacktrace will be shown as a result in the reprex. ( #12 ) v0.1.0 (2021-02-15) \u00b6 Initial release! \ud83c\udf89","title":"Changelog"},{"location":"changelog/#reprexlite-changelog","text":"","title":"reprexlite Changelog"},{"location":"changelog/#v031-2021-02-26","text":"Documentation improvements. ( #14 , #19 )","title":"v0.3.1 (2021-02-26)"},{"location":"changelog/#v030-2021-02-25","text":"Changed pygments styling to use the \"friendly\" color scheme, which looks better for dark backgrounds. ( #15 ) Changed submodule organization for code related to reprex formatting. This is now in the formatting submodule. ( #17 )","title":"v0.3.0 (2021-02-25)"},{"location":"changelog/#v020-2021-02-20","text":"Removing old results from inputs: ( #8 ) Changed reprexes to\u2014by default\u2014remove lines matching the comment prefix ( #> by default). This means that if your input code is a previously rendered reprex, the old results will be removed first and you effectively regenerate it. Added a new option old_results that\u2014if set to True\u2014will preserve such lines. Fixed a bug that caused intentional blank lines to be removed. ( #7 ) Added stdout capturing. Any content printed to stdout will be shown as a result in the reprex. ( #10 ) Added exception handling and stacktrace capture. If the input code has an exception, the stacktrace will be shown as a result in the reprex. ( #12 )","title":"v0.2.0 (2021-02-20)"},{"location":"changelog/#v010-2021-02-15","text":"Initial release! \ud83c\udf89","title":"v0.1.0 (2021-02-15)"},{"location":"cli/","text":"CLI Help Documentation \u00b6 reprex --help Usage: reprex [OPTIONS] Render reproducible examples of Python code for sharing. Your code will be executed and the results will be embedded as comments below their associated lines. By default, your system's default command-line text editor will open for you to type or paste in your code. This editor can be changed by setting the EDITOR environment variable. You can instead specify an input file with the --infile / -i option Additional markup will be added that is appropriate to the choice of venue option. For example, for the default `gh` venue for GitHub Flavored Markdown, the final reprex will look like: ---------------------------------------- ```python arr = [1, 2, 3, 4, 5] [x + 1 for x in arr] #> [2, 3, 4, 5, 6] max(arr) - min(arr) #> 4 ``` \b <sup>Created at 2021-02-15 16:58:47 PST by [reprexlite](https://github.com/jayqi/reprexlite) v0.1.0</sup> ---------------------------------------- The supported venue formats are: \b - gh : GitHub Flavored Markdown - so : StackOverflow, alias for gh - ds : Discourse, alias for gh - html : HTML - py : Python script - rtf : Rich Text Format - slack : Slack Options: -i, --infile PATH Read code from an input file instead via editor. -o, --outfile PATH Write output to file instead of printing to console. -v, --venue [gh|so|ds|html|py|rtf|slack] Output format appropriate to the venue where you plan to share this code. [default: gh] --advertise / --no-advertise Whether to include footer that credits reprexlite. If unspecified, will depend on specified venue's default. --session-info Whether to include details about session and installed packages. --style Autoformat code with black. Requires black to be installed. --comment TEXT Comment prefix to use for results returned by expressions. [default: #>] --old-results Keep old results, i.e., lines that match the prefix specified by the --comment option. If not using this option, then such lines are removed, meaning that an input that is a reprex will be effectively regenerated. --version Show reprexlite version and exit. --install-completion [bash|zsh|fish|powershell|pwsh] Install completion for the specified shell. --show-completion [bash|zsh|fish|powershell|pwsh] Show completion for the specified shell, to copy it or customize the installation. --help Show this message and exit.","title":"CLI Help"},{"location":"cli/#cli-help-documentation","text":"reprex --help Usage: reprex [OPTIONS] Render reproducible examples of Python code for sharing. Your code will be executed and the results will be embedded as comments below their associated lines. By default, your system's default command-line text editor will open for you to type or paste in your code. This editor can be changed by setting the EDITOR environment variable. You can instead specify an input file with the --infile / -i option Additional markup will be added that is appropriate to the choice of venue option. For example, for the default `gh` venue for GitHub Flavored Markdown, the final reprex will look like: ---------------------------------------- ```python arr = [1, 2, 3, 4, 5] [x + 1 for x in arr] #> [2, 3, 4, 5, 6] max(arr) - min(arr) #> 4 ``` \b <sup>Created at 2021-02-15 16:58:47 PST by [reprexlite](https://github.com/jayqi/reprexlite) v0.1.0</sup> ---------------------------------------- The supported venue formats are: \b - gh : GitHub Flavored Markdown - so : StackOverflow, alias for gh - ds : Discourse, alias for gh - html : HTML - py : Python script - rtf : Rich Text Format - slack : Slack Options: -i, --infile PATH Read code from an input file instead via editor. -o, --outfile PATH Write output to file instead of printing to console. -v, --venue [gh|so|ds|html|py|rtf|slack] Output format appropriate to the venue where you plan to share this code. [default: gh] --advertise / --no-advertise Whether to include footer that credits reprexlite. If unspecified, will depend on specified venue's default. --session-info Whether to include details about session and installed packages. --style Autoformat code with black. Requires black to be installed. --comment TEXT Comment prefix to use for results returned by expressions. [default: #>] --old-results Keep old results, i.e., lines that match the prefix specified by the --comment option. If not using this option, then such lines are removed, meaning that an input that is a reprex will be effectively regenerated. --version Show reprexlite version and exit. --install-completion [bash|zsh|fish|powershell|pwsh] Install completion for the specified shell. --show-completion [bash|zsh|fish|powershell|pwsh] Show completion for the specified shell, to copy it or customize the installation. --help Show this message and exit.","title":"CLI Help Documentation"},{"location":"design-philosophy/","text":"Design Philosophy \u00b6 Reprex is a portmanteau for repr oducible ex ample. This term and its associated approach to minimal reproducible examples have been popularized within the R data science community, driven by the adoption of the reprex tidyverse package. The reprex code: Must run and, therefore, should be run by the person posting . No faking it. Should be easy for others to digest, so they don\u2019t necessarily have to run it . You are encouraged to include selected bits of output. Should be easy for others to copy + paste + run, if and only if they so choose . Don\u2019t let inclusion of output break executability. \u2015 \"Package Philosophy,\" from the R reprex documentation Writing a good reprex takes thought and effort (see \"Reprex Do's and Don'ts\" for tips). The goal of reprexlite is to be a tool for Python that handles the mechanical stuff\u2014running your code, capturing the output, formatting everything\u2014so you don't have to worry about it, and you can devote your full attention to the important, creative work of writing the content. The action of running your code and seeing the outputs can also be a helpful forcing function in really making sure your example works and produces what you intend. Why reproducible examples? \u00b6 From the R reprex readme . If you're looking for help with a problem or bug... \u00b6 ...you are more likely to succeed if you make it as easy as possible for others to help you. You are asking people to do work on your behalf. Remember: most open-source software maintainers and StackOverflow posters are volunteers and are not obligated to help you. Even someone who is obligated to help you would still be able to get to an answer more quickly if you make it easier for them to understand your problem. Plus, the exercise of writing the reprex might even help you figure out how to solve the problem yourself. This is basically the principle of rubber duck debugging . If you're writing a tutorial or documentation... \u00b6 ...actual working examples are valuable to your users. A reprex\u2014with complete directly runnable code and showing the expected outputs\u2014will show your audience what you're demonstrating, and also give them the option to easily try for themselves. Doing is often the most effective way of learning how to do something in code. And, with documentation especially, people often just want to arrive at working code for their use case as quickly as possible. Something that they can just copy and run is exactly what they're looking for. Reprex vs. Copying from shell (doctest-style) \u00b6 A widely used approach for Python code examples is copying from an interactive Python shell. It is easily recognized from the >>> prompt before each code statement. Such a code example is sometimes called a \"doctest\" because the doctest module from the Python standard library is able to parse it. >>> import math >>> math . sqrt ( 4 ) 2.0 This style of code example takes no special tools to generate: simply open a python shell from command line, write your code, and copy what you see. Many Python packages use it for their documentation, e.g., requests . There is also tooling for parsing it. The doctest module can run such examples in the docstrings of your scripts, and test that the output matches what is written. Other tools like Sphinx are able to parse it when rendering your documentation into other formats. The drawback of doctest-style examples is that they are not valid Python syntax, so you can't just copy, paste, and run such examples. The >>> prompt is not valid. While IPython's interactive shell and Jupyter notebooks do support executing code with the prompt, it won't work in a regular Python REPL or in Python scripts. Furthermore, since the outputs might be anything, they may not be valid Python syntax either, depending on their repr . A barebones class, for example, will look like <__main__.MyClass object at 0x7f932a001400> and is not valid. So, while no special tools were needed to generate a doctest-style example, either special tools or manual editing are needed to run it. This puts the burden on the person you're sharing with, which is counterproductive. As discussed in the previous section, we want reproducible examples to make it easier for others to run your code. In contrast, reprexes are valid Python code. Anyone can copy, paste, and run a reprex without any special tools or manual editing required. import math math . sqrt ( 4 ) #> 2.0 reprexlite's Design \u00b6 The primary design goal of reprexlite is that it should be quick and convenient to use. That objective drove the emphasis on following the design characteristics: Lightweight . reprexlite needs to be in your virtual environment to be able to run your code. By having minimal and lightweight dependencies itself, reprexlite is quick to install and is unlikely to conflict with your other dependencies. Quick access . reprexlite comes with a CLI, so you can quickly create a reprex without needing to start a Python shell or to import anything. The API, including the available configuration and naming of parameters, mostly matches both R reprex and reprexpy . The intent is that anyone familiar with these other tools can quickly feel comfortable with reprexlite. As a secondary objective, the reprexlite library is designed so that its underlying functionality is accessible and extensible. It has a modular object-oriented design based on composition. Individual parts, like the code parsing or the output formatting, can be used independently, extended, or replaced. Additionally, the library is thoroughly type-annotated and documented. Limitations \u00b6 Compared to R reprex and reprexpy , reprexlite does trade off some capabilities in favor of our design objective. Known limitations include: No clipboard integration. The two main Python clipboard libraries, pyperclip and xerox , have non-Python dependencies on some OSes that make them sometimes difficult to install. However, command-line editor support built-in to the CLI is nearly as easy as reading from clipboard, and has the added benefit that you can see the code before it gets executed. No plot image support. Both R reprex and reprexpy support automatically uploading plots to imgur.com and injecting the link into your outputted reprex. This always seemed to me like a weird default as it could lead to inadvertent leaking of private data. Code is not run in a subprocess, so it's not perfectly isolated. reprexlite runs the code using eval and exec with a fresh namespace, but otherwise still executes code within the main Python process. That means, for example, modules that are stateful or have been monkeypatched could potentially leak that state into the reprex. By not supporting the first two functionalities, reprexlite has significantly fewer and simpler dependencies. Both of these features, while convenient, could lead to unintentional code execution or leaking data to the public web. From that perspective, I believe this is a worthwhile tradeoff. The third limitation is one where feedback is welcome. Hopefully it will only matter in unusual edge cases. If you have ideas for mitigation for the current eval - exec implementation, please open an issue on GitHub . A subprocess-based implementation would solve this, but would be more difficult to capture output from\u2014any implementation ideas for this approach are also welcome.","title":"Design Philosophy"},{"location":"design-philosophy/#design-philosophy","text":"Reprex is a portmanteau for repr oducible ex ample. This term and its associated approach to minimal reproducible examples have been popularized within the R data science community, driven by the adoption of the reprex tidyverse package. The reprex code: Must run and, therefore, should be run by the person posting . No faking it. Should be easy for others to digest, so they don\u2019t necessarily have to run it . You are encouraged to include selected bits of output. Should be easy for others to copy + paste + run, if and only if they so choose . Don\u2019t let inclusion of output break executability. \u2015 \"Package Philosophy,\" from the R reprex documentation Writing a good reprex takes thought and effort (see \"Reprex Do's and Don'ts\" for tips). The goal of reprexlite is to be a tool for Python that handles the mechanical stuff\u2014running your code, capturing the output, formatting everything\u2014so you don't have to worry about it, and you can devote your full attention to the important, creative work of writing the content. The action of running your code and seeing the outputs can also be a helpful forcing function in really making sure your example works and produces what you intend.","title":"Design Philosophy"},{"location":"design-philosophy/#why-reproducible-examples","text":"From the R reprex readme .","title":"Why reproducible examples?"},{"location":"design-philosophy/#if-youre-looking-for-help-with-a-problem-or-bug","text":"...you are more likely to succeed if you make it as easy as possible for others to help you. You are asking people to do work on your behalf. Remember: most open-source software maintainers and StackOverflow posters are volunteers and are not obligated to help you. Even someone who is obligated to help you would still be able to get to an answer more quickly if you make it easier for them to understand your problem. Plus, the exercise of writing the reprex might even help you figure out how to solve the problem yourself. This is basically the principle of rubber duck debugging .","title":"If you're looking for help with a problem or bug..."},{"location":"design-philosophy/#if-youre-writing-a-tutorial-or-documentation","text":"...actual working examples are valuable to your users. A reprex\u2014with complete directly runnable code and showing the expected outputs\u2014will show your audience what you're demonstrating, and also give them the option to easily try for themselves. Doing is often the most effective way of learning how to do something in code. And, with documentation especially, people often just want to arrive at working code for their use case as quickly as possible. Something that they can just copy and run is exactly what they're looking for.","title":"If you're writing a tutorial or documentation..."},{"location":"design-philosophy/#reprex-vs-copying-from-shell-doctest-style","text":"A widely used approach for Python code examples is copying from an interactive Python shell. It is easily recognized from the >>> prompt before each code statement. Such a code example is sometimes called a \"doctest\" because the doctest module from the Python standard library is able to parse it. >>> import math >>> math . sqrt ( 4 ) 2.0 This style of code example takes no special tools to generate: simply open a python shell from command line, write your code, and copy what you see. Many Python packages use it for their documentation, e.g., requests . There is also tooling for parsing it. The doctest module can run such examples in the docstrings of your scripts, and test that the output matches what is written. Other tools like Sphinx are able to parse it when rendering your documentation into other formats. The drawback of doctest-style examples is that they are not valid Python syntax, so you can't just copy, paste, and run such examples. The >>> prompt is not valid. While IPython's interactive shell and Jupyter notebooks do support executing code with the prompt, it won't work in a regular Python REPL or in Python scripts. Furthermore, since the outputs might be anything, they may not be valid Python syntax either, depending on their repr . A barebones class, for example, will look like <__main__.MyClass object at 0x7f932a001400> and is not valid. So, while no special tools were needed to generate a doctest-style example, either special tools or manual editing are needed to run it. This puts the burden on the person you're sharing with, which is counterproductive. As discussed in the previous section, we want reproducible examples to make it easier for others to run your code. In contrast, reprexes are valid Python code. Anyone can copy, paste, and run a reprex without any special tools or manual editing required. import math math . sqrt ( 4 ) #> 2.0","title":"Reprex vs. Copying from shell (doctest-style)"},{"location":"design-philosophy/#reprexlites-design","text":"The primary design goal of reprexlite is that it should be quick and convenient to use. That objective drove the emphasis on following the design characteristics: Lightweight . reprexlite needs to be in your virtual environment to be able to run your code. By having minimal and lightweight dependencies itself, reprexlite is quick to install and is unlikely to conflict with your other dependencies. Quick access . reprexlite comes with a CLI, so you can quickly create a reprex without needing to start a Python shell or to import anything. The API, including the available configuration and naming of parameters, mostly matches both R reprex and reprexpy . The intent is that anyone familiar with these other tools can quickly feel comfortable with reprexlite. As a secondary objective, the reprexlite library is designed so that its underlying functionality is accessible and extensible. It has a modular object-oriented design based on composition. Individual parts, like the code parsing or the output formatting, can be used independently, extended, or replaced. Additionally, the library is thoroughly type-annotated and documented.","title":"reprexlite's Design"},{"location":"design-philosophy/#limitations","text":"Compared to R reprex and reprexpy , reprexlite does trade off some capabilities in favor of our design objective. Known limitations include: No clipboard integration. The two main Python clipboard libraries, pyperclip and xerox , have non-Python dependencies on some OSes that make them sometimes difficult to install. However, command-line editor support built-in to the CLI is nearly as easy as reading from clipboard, and has the added benefit that you can see the code before it gets executed. No plot image support. Both R reprex and reprexpy support automatically uploading plots to imgur.com and injecting the link into your outputted reprex. This always seemed to me like a weird default as it could lead to inadvertent leaking of private data. Code is not run in a subprocess, so it's not perfectly isolated. reprexlite runs the code using eval and exec with a fresh namespace, but otherwise still executes code within the main Python process. That means, for example, modules that are stateful or have been monkeypatched could potentially leak that state into the reprex. By not supporting the first two functionalities, reprexlite has significantly fewer and simpler dependencies. Both of these features, while convenient, could lead to unintentional code execution or leaking data to the public web. From that perspective, I believe this is a worthwhile tradeoff. The third limitation is one where feedback is welcome. Hopefully it will only matter in unusual edge cases. If you have ideas for mitigation for the current eval - exec implementation, please open an issue on GitHub . A subprocess-based implementation would solve this, but would be more difficult to capture output from\u2014any implementation ideas for this approach are also welcome.","title":"Limitations"},{"location":"dos-and-donts/","text":"Reprex Do's and Don'ts \u00b6 This article discusses how to write an effective reprex. If you're asking for help or sharing code with someone, you will be much more likely to succeed if you have a good reprex. If you still need to be convinced why you should write a reprex or use reprexlite, check out the first half of \"Design Philosophy\" . Writing a good reprex takes thought and effort. A tool like reprexlite is not a magic bullet\u2014it's meant to take care of the mechanical stuff so you can devote your energy towards coming up with the right content. Many of the key ideas in this article are borrowed from R reprex's \"Reprex do's and don'ts\" and StackOverflow's \"How to create a Minimal, Reproducible Example\" . Your reprexes should be... \u00b6 Minimal \u00b6 Do use the smallest, simplest data possible. If you need a dataframe, the sklearn.datasets module has convenient toy datasets like iris . The Faker library has utilities to help you generate fake data like names and addresses. Don't include code unrelated to the specific thing you want to demonstrate. Do ruthlessly remove unnecessary code. If you're not sure, try removing things bit by bit until it doesn't produce what you want anymore. Consider starting your reprex from scratch. This helps force you to add in only what is needed. Readable \u00b6 Do follow code style best practices . Consider using the style option which will use black to autoformat your code. Don't sacrifice clarity for brevity. Don't play code golf . For loops and if-else blocks can often be more readable. Do use clear, descriptive, and idiomatic naming conventions. Reproducible \u00b6 Do include everything required to produce your example, including imports and custom class/function definitions. If you're using reprexlite, your code won't work without this anyways. Do detail what versions of relevant package, Python, and OS you are using. Consider using the session_info option, which will include information about your Python, OS, and installed packages at the end of your reprex. Do double-check that your example reproduces the thing you want to show. One can often inadvertently solve a problem they were trying to debug when writing an example. Don't hardcode paths that wouldn't exist on someone else's computer, especially absolute paths. Respectful of other people's computers \u00b6 Do clean up after yourself if you create files. Take advantage of Python's tempfile module for creating temporary files and directories. Don't delete files that you didn't create. This seems like a lot of work! \u00b6 Yes, creating a great reprex requires work. You are asking other people to do work too. It\u2019s a partnership. 80% of the time you will solve your own problem in the course of writing an excellent reprex. YMMV. The remaining 20% of the time, you will create a reprex that is more likely to elicit the desired behavior in others. \u2015 \"Reprex do's and don'ts,\" from the R reprex documentation","title":"Reprex Do's and Don'ts"},{"location":"dos-and-donts/#reprex-dos-and-donts","text":"This article discusses how to write an effective reprex. If you're asking for help or sharing code with someone, you will be much more likely to succeed if you have a good reprex. If you still need to be convinced why you should write a reprex or use reprexlite, check out the first half of \"Design Philosophy\" . Writing a good reprex takes thought and effort. A tool like reprexlite is not a magic bullet\u2014it's meant to take care of the mechanical stuff so you can devote your energy towards coming up with the right content. Many of the key ideas in this article are borrowed from R reprex's \"Reprex do's and don'ts\" and StackOverflow's \"How to create a Minimal, Reproducible Example\" .","title":"Reprex Do's and Don'ts"},{"location":"dos-and-donts/#your-reprexes-should-be","text":"","title":"Your reprexes should be..."},{"location":"dos-and-donts/#minimal","text":"Do use the smallest, simplest data possible. If you need a dataframe, the sklearn.datasets module has convenient toy datasets like iris . The Faker library has utilities to help you generate fake data like names and addresses. Don't include code unrelated to the specific thing you want to demonstrate. Do ruthlessly remove unnecessary code. If you're not sure, try removing things bit by bit until it doesn't produce what you want anymore. Consider starting your reprex from scratch. This helps force you to add in only what is needed.","title":"Minimal"},{"location":"dos-and-donts/#readable","text":"Do follow code style best practices . Consider using the style option which will use black to autoformat your code. Don't sacrifice clarity for brevity. Don't play code golf . For loops and if-else blocks can often be more readable. Do use clear, descriptive, and idiomatic naming conventions.","title":"Readable"},{"location":"dos-and-donts/#reproducible","text":"Do include everything required to produce your example, including imports and custom class/function definitions. If you're using reprexlite, your code won't work without this anyways. Do detail what versions of relevant package, Python, and OS you are using. Consider using the session_info option, which will include information about your Python, OS, and installed packages at the end of your reprex. Do double-check that your example reproduces the thing you want to show. One can often inadvertently solve a problem they were trying to debug when writing an example. Don't hardcode paths that wouldn't exist on someone else's computer, especially absolute paths.","title":"Reproducible"},{"location":"dos-and-donts/#respectful-of-other-peoples-computers","text":"Do clean up after yourself if you create files. Take advantage of Python's tempfile module for creating temporary files and directories. Don't delete files that you didn't create.","title":"Respectful of other people's computers"},{"location":"dos-and-donts/#this-seems-like-a-lot-of-work","text":"Yes, creating a great reprex requires work. You are asking other people to do work too. It\u2019s a partnership. 80% of the time you will solve your own problem in the course of writing an excellent reprex. YMMV. The remaining 20% of the time, you will create a reprex that is more likely to elicit the desired behavior in others. \u2015 \"Reprex do's and don'ts,\" from the R reprex documentation","title":"This seems like a lot of work!"},{"location":"api-reference/code/","text":"reprexlite.code \u00b6 Attributes \u00b6 NO_RETURN \u00b6 Explicit placeholder object for statements, which have no return value (as opposed to expressions). Classes \u00b6 CodeBlock \u00b6 Class that takes a block of Python code input and evaluates it. Call str(...) on an instance to get back a string containing the original source with evaluated outputs embedded as comments below each statement. Attributes: Name Type Description input str Block of Python code style bool Whether to use black to autoformat code in returned string representation. comment str Line prefix to use when rendering the evaluated results. terminal bool Whether to apply syntax highlighting to the string representation. Requires optional dependency Pygments. tree libcst.Module Parsed LibCST concrete syntax tree of input code. statements List[Statement] List of individual statements parsed from input code. results List[Result] List of evaluated results corresponding to each item of statements. Methods \u00b6 __init__ ( self , input , style = False , comment = '#>' , terminal = False , old_results = False ) special \u00b6 Initializer method. Parameters: Name Type Description Default input str Block of Python code required style bool Whether to use black to autoformat code in returned string representation. Defaults to False. False comment str Line prefix to use when rendering the evaluated results. Defaults to \"#>\". '#>' terminal bool Whether to apply syntax highlighting to the string representation. Requires optional dependency Pygments. Defaults to False. False old_results bool Whether to keep old results, i.e., comment lines in input that match the comment prefix. False means these lines are removed, in effect meaning an inputted regex will have its results regenerated. Defaults to False. False Source code in reprexlite/code.py def __init__ ( self , input : str , style : bool = False , comment : str = \"#>\" , terminal = False , old_results : bool = False , ): \"\"\"Initializer method. Args: input (str): Block of Python code style (bool): Whether to use black to autoformat code in returned string representation. Defaults to False. comment (str): Line prefix to use when rendering the evaluated results. Defaults to \"#>\". terminal (bool): Whether to apply syntax highlighting to the string representation. Requires optional dependency Pygments. Defaults to False. old_results (bool): Whether to keep old results, i.e., comment lines in input that match the `comment` prefix. False means these lines are removed, in effect meaning an inputted regex will have its results regenerated. Defaults to False. \"\"\" if not old_results and comment in input : input = \" \\n \" . join ( line for line in input . split ( \" \\n \" ) if not line . startswith ( comment )) self . input : str = input self . terminal = terminal # Parse code self . tree : cst . Module = cst . parse_module ( input ) self . statements : List [ Statement ] = [ Statement ( stmt , style = style ) for stmt in self . tree . body ] # Evaluate code self . namespace : dict = {} self . results : List [ Result ] = [ stmt . evaluate ( self . namespace ) for stmt in self . statements ] for res in self . results : res . comment = comment Result \u00b6 Class that holds the result of evaluated code. Use str(...) on an instance to produce a pretty-formatted comment block representation of the result. Attributes: Name Type Description result Any Some Python object, intended to be the return value of evaluated Python code. comment str Line prefix to use when rendering the result for a reprex. __init__ ( self , result , stdout = None , comment = '#>' ) special \u00b6 Source code in reprexlite/code.py def __init__ ( self , result : Any , stdout : Optional [ str ] = None , comment : str = \"#>\" ): self . result = result self . stdout = stdout self . comment = comment Statement \u00b6 Class that holds a LibCST parsed statement. The evaluate method will evaluate the statement and return a Result object. To recover the original source code for an instancement, call str(...) on it. You can optionally autoformat the returned source code, controlled by the style attribute. Attributes: Name Type Description stmt Union[libcst.SimpleStatementLine, libcst.BaseCompoundStatement] LibCST parsed statement. style bool Whether to autoformat the source code with black. __init__ ( self , stmt , style = False ) special \u00b6 Source code in reprexlite/code.py def __init__ ( self , stmt : Union [ cst . SimpleStatementLine , cst . BaseCompoundStatement ], style : bool = False ): self . stmt = stmt self . style = style evaluate ( self , scope ) \u00b6 Source code in reprexlite/code.py def evaluate ( self , scope : dict ) -> Result : stdout_io = StringIO () try : with redirect_stdout ( stdout_io ): try : result = eval ( str ( self ) . strip (), scope , scope ) except SyntaxError : exec ( str ( self ) . strip (), scope , scope ) result = NO_RETURN stdout = stdout_io . getvalue () . strip () except Exception : result = NO_RETURN stdout = traceback . format_exc () . strip () finally : stdout_io . close () return Result ( result , stdout = stdout )","title":"reprexlite.code"},{"location":"api-reference/code/#reprexlitecode","text":"","title":"reprexlite.code"},{"location":"api-reference/code/#attributes","text":"","title":"Attributes"},{"location":"api-reference/code/#reprexlite.code.NO_RETURN","text":"Explicit placeholder object for statements, which have no return value (as opposed to expressions).","title":"NO_RETURN"},{"location":"api-reference/code/#classes","text":"","title":"Classes"},{"location":"api-reference/code/#reprexlite.code.CodeBlock","text":"Class that takes a block of Python code input and evaluates it. Call str(...) on an instance to get back a string containing the original source with evaluated outputs embedded as comments below each statement. Attributes: Name Type Description input str Block of Python code style bool Whether to use black to autoformat code in returned string representation. comment str Line prefix to use when rendering the evaluated results. terminal bool Whether to apply syntax highlighting to the string representation. Requires optional dependency Pygments. tree libcst.Module Parsed LibCST concrete syntax tree of input code. statements List[Statement] List of individual statements parsed from input code. results List[Result] List of evaluated results corresponding to each item of statements.","title":"CodeBlock"},{"location":"api-reference/code/#reprexlite.code.Result","text":"Class that holds the result of evaluated code. Use str(...) on an instance to produce a pretty-formatted comment block representation of the result. Attributes: Name Type Description result Any Some Python object, intended to be the return value of evaluated Python code. comment str Line prefix to use when rendering the result for a reprex.","title":"Result"},{"location":"api-reference/code/#reprexlite.code.Statement","text":"Class that holds a LibCST parsed statement. The evaluate method will evaluate the statement and return a Result object. To recover the original source code for an instancement, call str(...) on it. You can optionally autoformat the returned source code, controlled by the style attribute. Attributes: Name Type Description stmt Union[libcst.SimpleStatementLine, libcst.BaseCompoundStatement] LibCST parsed statement. style bool Whether to autoformat the source code with black.","title":"Statement"},{"location":"api-reference/formatting/","text":"reprexlite.formatting \u00b6 Attributes \u00b6 venues_dispatcher : Dict [ str , Type [ reprexlite . formatting . Reprex ]] \u00b6 Mapping from venue keywords to their Reprex implementation. Classes \u00b6 Advertisement \u00b6 Class for generating the advertisement note for reprexlite. Attributes: Name Type Description timestamp str Timestamp of instance instantiation version str Version of reprexlite pkg \u00b6 url \u00b6 Methods \u00b6 __init__ ( self ) special \u00b6 Source code in reprexlite/formatting.py def __init__ ( self ): self . timestamp = datetime . now () . astimezone () . strftime ( \"%Y-%m- %d %H:%M:%S %Z\" ) self . version = f \"v { __version__ } \" code_comment ( self ) \u00b6 Render reprexlite advertisement as a comment in Python code. Source code in reprexlite/formatting.py def code_comment ( self ) -> str : \"\"\"Render reprexlite advertisement as a comment in Python code.\"\"\" return f \"# { self . text () } \" html ( self ) \u00b6 Render reprexlite advertisement in HTML. Source code in reprexlite/formatting.py def html ( self ) -> str : \"\"\"Render reprexlite advertisement in HTML.\"\"\" return ( f \"<p><sup>Created at { self . timestamp } by \" f '<a href=\" { self . url } \"> { self . pkg } </a> { self . version } </sup></p>' ) markdown ( self ) \u00b6 Render reprexlite advertisement in GitHub Flavored Markdown. Source code in reprexlite/formatting.py def markdown ( self ) -> str : \"\"\"Render reprexlite advertisement in GitHub Flavored Markdown.\"\"\" return f \"<sup>Created at { self . timestamp } by [ { self . pkg } ]( { self . url } ) { self . version } </sup>\" text ( self ) \u00b6 Render reprexlite advertisement in plain text. Source code in reprexlite/formatting.py def text ( self ) -> str : \"\"\"Render reprexlite advertisement in plain text.\"\"\" return f \"Created at { self . timestamp } by { self . pkg } { self . version } < { self . url } >\" GitHubReprex \u00b6 Concrete implementation for rendering reprexes in GitHub Flavored Markdown. Attributes \u00b6 default_advertise : bool \u00b6 Default for whether to include reprexlite advertisement for this venue format. __init__ ( self , code_block , advertise = None , session_info = False ) inherited special \u00b6 Source code in reprexlite/formatting.py def __init__ ( self , code_block : CodeBlock , advertise : Optional [ bool ] = None , session_info : bool = False ): self . code_block : CodeBlock = code_block self . advertise : bool = self . default_advertise if advertise is None else advertise self . session_info : bool = session_info HtmlReprex \u00b6 Concrete implementation for rendering reprexes in HTML. If optional dependency Pygments is available, the rendered HTML will have syntax highlighting for the Python code. Attributes \u00b6 default_advertise : bool \u00b6 Default for whether to include reprexlite advertisement for this venue format. __init__ ( self , code_block , advertise = None , session_info = False ) inherited special \u00b6 Source code in reprexlite/formatting.py def __init__ ( self , code_block : CodeBlock , advertise : Optional [ bool ] = None , session_info : bool = False ): self . code_block : CodeBlock = code_block self . advertise : bool = self . default_advertise if advertise is None else advertise self . session_info : bool = session_info PyScriptReprex \u00b6 Concrete implementation for rendering reprexes as a Python script. Attributes \u00b6 default_advertise : bool \u00b6 Default for whether to include reprexlite advertisement for this venue format. __init__ ( self , code_block , advertise = None , session_info = False ) inherited special \u00b6 Source code in reprexlite/formatting.py def __init__ ( self , code_block : CodeBlock , advertise : Optional [ bool ] = None , session_info : bool = False ): self . code_block : CodeBlock = code_block self . advertise : bool = self . default_advertise if advertise is None else advertise self . session_info : bool = session_info Reprex \u00b6 Abstract base class for a reprex instance. Concrete subclasses should implement the formatting logic appropriate to a specific venue for sharing. Call str(...) on an instance to return the formatted reprex. Attributes: Name Type Description code_block CodeBlock instance of CodeBlock advertise bool whether to render reprexlite advertisement session_info bool whether to render session info __init__ ( self , code_block , advertise = None , session_info = False ) special \u00b6 Source code in reprexlite/formatting.py def __init__ ( self , code_block : CodeBlock , advertise : Optional [ bool ] = None , session_info : bool = False ): self . code_block : CodeBlock = code_block self . advertise : bool = self . default_advertise if advertise is None else advertise self . session_info : bool = session_info RtfReprex \u00b6 Concrete implementation for rendering reprexes in Rich Text Format. Attributes \u00b6 default_advertise : bool \u00b6 Default for whether to include reprexlite advertisement for this venue format. __init__ ( self , code_block , advertise = None , session_info = False ) inherited special \u00b6 Source code in reprexlite/formatting.py def __init__ ( self , code_block : CodeBlock , advertise : Optional [ bool ] = None , session_info : bool = False ): self . code_block : CodeBlock = code_block self . advertise : bool = self . default_advertise if advertise is None else advertise self . session_info : bool = session_info SlackReprex \u00b6 Concrete implementation for rendering reprexes as Slack markup. Attributes \u00b6 default_advertise : bool \u00b6 Default for whether to include reprexlite advertisement for this venue format. __init__ ( self , code_block , advertise = None , session_info = False ) inherited special \u00b6 Source code in reprexlite/formatting.py def __init__ ( self , code_block : CodeBlock , advertise : Optional [ bool ] = None , session_info : bool = False ): self . code_block : CodeBlock = code_block self . advertise : bool = self . default_advertise if advertise is None else advertise self . session_info : bool = session_info Venue \u00b6 Enum for valid venue options.","title":"reprexlite.formatting"},{"location":"api-reference/formatting/#reprexliteformatting","text":"","title":"reprexlite.formatting"},{"location":"api-reference/formatting/#attributes","text":"","title":"Attributes"},{"location":"api-reference/formatting/#reprexlite.formatting.venues_dispatcher","text":"Mapping from venue keywords to their Reprex implementation.","title":"venues_dispatcher"},{"location":"api-reference/formatting/#classes","text":"","title":"Classes"},{"location":"api-reference/formatting/#reprexlite.formatting.Advertisement","text":"Class for generating the advertisement note for reprexlite. Attributes: Name Type Description timestamp str Timestamp of instance instantiation version str Version of reprexlite","title":"Advertisement"},{"location":"api-reference/formatting/#reprexlite.formatting.GitHubReprex","text":"Concrete implementation for rendering reprexes in GitHub Flavored Markdown.","title":"GitHubReprex"},{"location":"api-reference/formatting/#reprexlite.formatting.HtmlReprex","text":"Concrete implementation for rendering reprexes in HTML. If optional dependency Pygments is available, the rendered HTML will have syntax highlighting for the Python code.","title":"HtmlReprex"},{"location":"api-reference/formatting/#reprexlite.formatting.PyScriptReprex","text":"Concrete implementation for rendering reprexes as a Python script.","title":"PyScriptReprex"},{"location":"api-reference/formatting/#reprexlite.formatting.Reprex","text":"Abstract base class for a reprex instance. Concrete subclasses should implement the formatting logic appropriate to a specific venue for sharing. Call str(...) on an instance to return the formatted reprex. Attributes: Name Type Description code_block CodeBlock instance of CodeBlock advertise bool whether to render reprexlite advertisement session_info bool whether to render session info","title":"Reprex"},{"location":"api-reference/formatting/#reprexlite.formatting.RtfReprex","text":"Concrete implementation for rendering reprexes in Rich Text Format.","title":"RtfReprex"},{"location":"api-reference/formatting/#reprexlite.formatting.SlackReprex","text":"Concrete implementation for rendering reprexes as Slack markup.","title":"SlackReprex"},{"location":"api-reference/formatting/#reprexlite.formatting.Venue","text":"Enum for valid venue options.","title":"Venue"},{"location":"api-reference/reprex/","text":"reprexlite \u00b6 Functions \u00b6 reprex ( input , outfile = None , venue = 'gh' , advertise = None , session_info = False , style = False , comment = '#>' , old_results = False , print_ = True , terminal = False ) \u00b6 Render reproducible examples of Python code for sharing. This function will evaluate your code and returns an instance of a Reprex subclass. Calling str(...) on the Reprex object will return your code with the evaluated results embedded as comments, plus additional markup appropriate to the sharing venue set by the venue keyword argument. For example, for the gh venue for GitHub Flavored Markdown, you'll get a reprex whose string representation looks like: ```python x = 2 x + 2 #> 4 ``` <sup>Created at 2021-02-15 16:58:47 PST by [reprexlite](https://github.com/jayqi/reprexlite) v0.1.0</sup> The supported venue formats are: gh : GitHub Flavored Markdown so : StackOverflow, alias for gh ds : Discourse, alias for gh html : HTML py : Python script rtf : Rich Text Format slack : Slack Parameters: Name Type Description Default input str Block of Python code required outfile Optional[pathlib.Path] Optional file path to write reprex to. Defaults to None. None venue str Determines the output format by the venue you want to share the code. Defaults to \"gh\" for GitHub Flavored Markdown. 'gh' advertise Optional[bool] Whether to include a note that links back to the reprexlite package. Default None will use the default set by choice of venue . None session_info bool Whether to include additional details about your Python version, operating system, and installed packages. Defaults to False. False style bool Whether to autoformat your code with black. Defaults to False. False comment str Line prefix to use for displaying evaluated results. Defaults to \"#>\". '#>' old_results bool Whether to keep old results, i.e., comment lines in input that match the comment prefix. False means these lines are removed, in effect meaning an inputted regex will have its results regenerated. Defaults to False. False print_ bool Whether to print your reprex to console. Defaults to True. True terminal bool Whether to use syntax highlighting for 256-color terminal display. Requires optional dependency Pygments. Defaults to False. False Returns: Type Description Reprex Instance of a Reprex concrete subclass for venue . Source code in reprexlite/reprex.py def reprex ( input : str , outfile : Optional [ Path ] = None , venue = \"gh\" , advertise : Optional [ bool ] = None , session_info : bool = False , style : bool = False , comment : str = \"#>\" , old_results : bool = False , print_ = True , terminal = False , ) -> Reprex : \"\"\"Render reproducible examples of Python code for sharing. This function will evaluate your code and returns an instance of a [`Reprex`][reprexlite.formatting.Reprex] subclass. Calling `str(...)` on the `Reprex` object will return your code with the evaluated results embedded as comments, plus additional markup appropriate to the sharing venue set by the `venue` keyword argument. For example, for the `gh` venue for GitHub Flavored Markdown, you'll get a reprex whose string representation looks like: ```` ```python x = 2 x + 2 #> 4 ``` <sup>Created at 2021-02-15 16:58:47 PST by [reprexlite](https://github.com/jayqi/reprexlite) v0.1.0</sup> ```` The supported `venue` formats are: - `gh` : GitHub Flavored Markdown - `so` : StackOverflow, alias for gh - `ds` : Discourse, alias for gh - `html` : HTML - `py` : Python script - `rtf` : Rich Text Format - `slack` : Slack Args: input (str): Block of Python code outfile (Optional[Path]): Optional file path to write reprex to. Defaults to None. venue (str): Determines the output format by the venue you want to share the code. Defaults to \"gh\" for GitHub Flavored Markdown. advertise (Optional[bool]): Whether to include a note that links back to the reprexlite package. Default `None` will use the default set by choice of `venue`. session_info (bool): Whether to include additional details about your Python version, operating system, and installed packages. Defaults to False. style (bool): Whether to autoformat your code with black. Defaults to False. comment (str): Line prefix to use for displaying evaluated results. Defaults to \"#>\". old_results (bool): Whether to keep old results, i.e., comment lines in input that match the `comment` prefix. False means these lines are removed, in effect meaning an inputted regex will have its results regenerated. Defaults to False. print_ (bool): Whether to print your reprex to console. Defaults to True. terminal (bool): Whether to use syntax highlighting for 256-color terminal display. Requires optional dependency Pygments. Defaults to False. Returns: Instance of a `Reprex` concrete subclass for `venue`. \"\"\" if outfile or venue in [ \"html\" , \"rtf\" ]: # Don't screw output file or lexing for HTML and RTF with terminal syntax highlighting terminal = False code_block = CodeBlock ( input , style = style , comment = comment , old_results = old_results , terminal = terminal ) reprex = venues_dispatcher [ venue ]( code_block = code_block , advertise = advertise , session_info = session_info ) if outfile is not None : with outfile . open ( \"w\" ) as fp : fp . write ( str ( reprex ) + \" \\n \" ) if print_ : print ( reprex ) return reprex","title":"reprexlite"},{"location":"api-reference/reprex/#reprexlite","text":"","title":"reprexlite"},{"location":"api-reference/reprex/#functions","text":"","title":"Functions"},{"location":"api-reference/reprex/#reprexlite.reprex.reprex","text":"Render reproducible examples of Python code for sharing. This function will evaluate your code and returns an instance of a Reprex subclass. Calling str(...) on the Reprex object will return your code with the evaluated results embedded as comments, plus additional markup appropriate to the sharing venue set by the venue keyword argument. For example, for the gh venue for GitHub Flavored Markdown, you'll get a reprex whose string representation looks like: ```python x = 2 x + 2 #> 4 ``` <sup>Created at 2021-02-15 16:58:47 PST by [reprexlite](https://github.com/jayqi/reprexlite) v0.1.0</sup> The supported venue formats are: gh : GitHub Flavored Markdown so : StackOverflow, alias for gh ds : Discourse, alias for gh html : HTML py : Python script rtf : Rich Text Format slack : Slack Parameters: Name Type Description Default input str Block of Python code required outfile Optional[pathlib.Path] Optional file path to write reprex to. Defaults to None. None venue str Determines the output format by the venue you want to share the code. Defaults to \"gh\" for GitHub Flavored Markdown. 'gh' advertise Optional[bool] Whether to include a note that links back to the reprexlite package. Default None will use the default set by choice of venue . None session_info bool Whether to include additional details about your Python version, operating system, and installed packages. Defaults to False. False style bool Whether to autoformat your code with black. Defaults to False. False comment str Line prefix to use for displaying evaluated results. Defaults to \"#>\". '#>' old_results bool Whether to keep old results, i.e., comment lines in input that match the comment prefix. False means these lines are removed, in effect meaning an inputted regex will have its results regenerated. Defaults to False. False print_ bool Whether to print your reprex to console. Defaults to True. True terminal bool Whether to use syntax highlighting for 256-color terminal display. Requires optional dependency Pygments. Defaults to False. False Returns: Type Description Reprex Instance of a Reprex concrete subclass for venue . Source code in reprexlite/reprex.py def reprex ( input : str , outfile : Optional [ Path ] = None , venue = \"gh\" , advertise : Optional [ bool ] = None , session_info : bool = False , style : bool = False , comment : str = \"#>\" , old_results : bool = False , print_ = True , terminal = False , ) -> Reprex : \"\"\"Render reproducible examples of Python code for sharing. This function will evaluate your code and returns an instance of a [`Reprex`][reprexlite.formatting.Reprex] subclass. Calling `str(...)` on the `Reprex` object will return your code with the evaluated results embedded as comments, plus additional markup appropriate to the sharing venue set by the `venue` keyword argument. For example, for the `gh` venue for GitHub Flavored Markdown, you'll get a reprex whose string representation looks like: ```` ```python x = 2 x + 2 #> 4 ``` <sup>Created at 2021-02-15 16:58:47 PST by [reprexlite](https://github.com/jayqi/reprexlite) v0.1.0</sup> ```` The supported `venue` formats are: - `gh` : GitHub Flavored Markdown - `so` : StackOverflow, alias for gh - `ds` : Discourse, alias for gh - `html` : HTML - `py` : Python script - `rtf` : Rich Text Format - `slack` : Slack Args: input (str): Block of Python code outfile (Optional[Path]): Optional file path to write reprex to. Defaults to None. venue (str): Determines the output format by the venue you want to share the code. Defaults to \"gh\" for GitHub Flavored Markdown. advertise (Optional[bool]): Whether to include a note that links back to the reprexlite package. Default `None` will use the default set by choice of `venue`. session_info (bool): Whether to include additional details about your Python version, operating system, and installed packages. Defaults to False. style (bool): Whether to autoformat your code with black. Defaults to False. comment (str): Line prefix to use for displaying evaluated results. Defaults to \"#>\". old_results (bool): Whether to keep old results, i.e., comment lines in input that match the `comment` prefix. False means these lines are removed, in effect meaning an inputted regex will have its results regenerated. Defaults to False. print_ (bool): Whether to print your reprex to console. Defaults to True. terminal (bool): Whether to use syntax highlighting for 256-color terminal display. Requires optional dependency Pygments. Defaults to False. Returns: Instance of a `Reprex` concrete subclass for `venue`. \"\"\" if outfile or venue in [ \"html\" , \"rtf\" ]: # Don't screw output file or lexing for HTML and RTF with terminal syntax highlighting terminal = False code_block = CodeBlock ( input , style = style , comment = comment , old_results = old_results , terminal = terminal ) reprex = venues_dispatcher [ venue ]( code_block = code_block , advertise = advertise , session_info = session_info ) if outfile is not None : with outfile . open ( \"w\" ) as fp : fp . write ( str ( reprex ) + \" \\n \" ) if print_ : print ( reprex ) return reprex","title":"reprex()"},{"location":"api-reference/session_info/","text":"reprexlite.session_info \u00b6 Classes \u00b6 Package \u00b6 Interface for adapting importlib.metadata.Distribution instances for introspection by SessionInfo . name : str property readonly \u00b6 version : str property readonly \u00b6 __init__ ( self , distribution ) special \u00b6 Source code in reprexlite/session_info.py def __init__ ( self , distribution : importlib_metadata . Distribution ): self . distribution = distribution SessionInfo \u00b6 Class for pretty-formatting Python session info. Includes details about your Python version, your operating system, and the Python packages installed in your current environment. Attributes: Name Type Description python_version str Python version for current session python_build_date str Date os str OS information for current session packages List[Package] List of Python packages installed in current virtual environment. __init__ ( self ) special \u00b6 Source code in reprexlite/session_info.py def __init__ ( self ): self . python_version : str = platform . python_version () self . python_build_date : str = platform . python_build ()[ 1 ] self . os : str = platform . platform () self . packages : List [ Package ] = [ Package ( distr ) for distr in importlib_metadata . Distribution . discover () ] Functions \u00b6 tabulate ( rows ) \u00b6 Utility function for printing a two-column table as text with whitespace padding. Parameters: Name Type Description Default rows List[Tuple[str, str]] Rows of table as tuples of (left cell, right cell) required Returns: Type Description List[str] Rows of table formatted as strings with whitespace padding Source code in reprexlite/session_info.py def tabulate ( rows : List [ Tuple [ str , str ]]) -> List [ str ]: \"\"\"Utility function for printing a two-column table as text with whitespace padding. Args: rows (List[Tuple[str, str]]): Rows of table as tuples of (left cell, right cell) Returns: Rows of table formatted as strings with whitespace padding \"\"\" left_max = max ( len ( row [ 0 ]) for row in rows ) out = [] for left , right in rows : padding = ( left_max + 1 - len ( left )) * \" \" out . append ( left + padding + right ) return out","title":"reprexlite.session_info"},{"location":"api-reference/session_info/#reprexlitesession_info","text":"","title":"reprexlite.session_info"},{"location":"api-reference/session_info/#classes","text":"","title":"Classes"},{"location":"api-reference/session_info/#reprexlite.session_info.Package","text":"Interface for adapting importlib.metadata.Distribution instances for introspection by SessionInfo .","title":"Package"},{"location":"api-reference/session_info/#reprexlite.session_info.SessionInfo","text":"Class for pretty-formatting Python session info. Includes details about your Python version, your operating system, and the Python packages installed in your current environment. Attributes: Name Type Description python_version str Python version for current session python_build_date str Date os str OS information for current session packages List[Package] List of Python packages installed in current virtual environment.","title":"SessionInfo"},{"location":"api-reference/session_info/#functions","text":"","title":"Functions"},{"location":"api-reference/session_info/#reprexlite.session_info.tabulate","text":"Utility function for printing a two-column table as text with whitespace padding. Parameters: Name Type Description Default rows List[Tuple[str, str]] Rows of table as tuples of (left cell, right cell) required Returns: Type Description List[str] Rows of table formatted as strings with whitespace padding Source code in reprexlite/session_info.py def tabulate ( rows : List [ Tuple [ str , str ]]) -> List [ str ]: \"\"\"Utility function for printing a two-column table as text with whitespace padding. Args: rows (List[Tuple[str, str]]): Rows of table as tuples of (left cell, right cell) Returns: Rows of table formatted as strings with whitespace padding \"\"\" left_max = max ( len ( row [ 0 ]) for row in rows ) out = [] for left , right in rows : padding = ( left_max + 1 - len ( left )) * \" \" out . append ( left + padding + right ) return out","title":"tabulate()"}]}